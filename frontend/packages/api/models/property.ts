/* tslint:disable */
/* eslint-disable */
/**
 * OptiPrism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@optiprism.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { DataType } from './data-type';
/**
 * Property defines event or user property. For example, event \"Buy product\" may contains next properties like \"Product name\" and \"Price.\" 
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * property unique id
     * @type {number}
     * @memberof Property
     */
    id: number;
    /**
     * create date
     * @type {Date}
     * @memberof Property
     */
    createdAt?: Date;
    /**
     * update (once updated)
     * @type {Date}
     * @memberof Property
     */
    updatedAt?: Date;
    /**
     * id of creator User
     * @type {number}
     * @memberof Property
     */
    createdBy?: number;
    /**
     * id of updater User
     * @type {number}
     * @memberof Property
     */
    updatedBy?: number;
    /**
     * project id
     * @type {number}
     * @memberof Property
     */
    projectId: number;
    /**
     * list of id of events which use this property
     * @type {Array<number>}
     * @memberof Property
     */
    events?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    type?: PropertyTypeEnum;
    /**
     * the property is a system-wide, shown in any project and can't be modified by a regular user
     * @type {boolean}
     * @memberof Property
     */
    isSystem: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Property
     */
    tags?: Array<string>;
    /**
     * property name. Must be unique
     * @type {string}
     * @memberof Property
     */
    name: string;
    /**
     * property name to display. If empty then name is used.
     * @type {string}
     * @memberof Property
     */
    displayName?: string;
    /**
     * description
     * @type {string}
     * @memberof Property
     */
    description?: string;
    /**
     * property status
     * @type {string}
     * @memberof Property
     */
    status: PropertyStatusEnum;
    /**
     * 
     * @type {any & DataType}
     * @memberof Property
     */
    dataType: any & DataType;
    /**
     * nullable property might contains null value
     * @type {boolean}
     * @memberof Property
     */
    nullable: boolean;
    /**
     * array property might contents multiple values
     * @type {boolean}
     * @memberof Property
     */
    isArray: boolean;
    /**
     * dictionary can efficiently packs strings provided that cardinality will be relatively log (16bits is a reasonable maximum)
     * @type {boolean}
     * @memberof Property
     */
    isDictionary: boolean;
    /**
     * 
     * @type {any & DataType}
     * @memberof Property
     */
    dictionaryType?: any & DataType;
}

/**
    * @export
    * @enum {string}
    */
export enum PropertyTypeEnum {
    Event = 'event',
    User = 'user'
}
/**
    * @export
    * @enum {string}
    */
export enum PropertyStatusEnum {
    Enabled = 'enabled',
    Disabled = 'disabled'
}

