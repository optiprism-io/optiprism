/* tslint:disable */
/* eslint-disable */
/**
 * OptiPrism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@optiprism.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { BreakdownByProperty } from './breakdown-by-property';
import { EventFilters } from './event-filters';
import { EventSegmentationSegment } from './event-segmentation-segment';
import { FunnelConversionOverTimeChartType } from './funnel-conversion-over-time-chart-type';
import { FunnelConversionStepsChartType } from './funnel-conversion-steps-chart-type';
import { FunnelEvent } from './funnel-event';
import { FunnelExcludeSteps } from './funnel-exclude-steps';
import { FunnelFrequencyChartType } from './funnel-frequency-chart-type';
import { FunnelQuerySteps } from './funnel-query-steps';
import { FunnelQueryTimeWindow } from './funnel-query-time-window';
import { FunnelTimeToConvertChartType } from './funnel-time-to-convert-chart-type';
import { PropertyRef } from './property-ref';
import { TimeBetween } from './time-between';
import { TimeFrom } from './time-from';
import { TimeLast } from './time-last';
/**
 * 
 * @export
 * @interface FunnelQuery
 */
export interface FunnelQuery {
    /**
     * select time
     * @type {TimeBetween | TimeFrom | TimeLast}
     * @memberof FunnelQuery
     */
    time?: TimeBetween | TimeFrom | TimeLast;
    /**
     * group that is used in aggregations by group. For instance, group by user or group by organizartion.
     * @type {string}
     * @memberof FunnelQuery
     */
    group?: string;
    /**
     * 
     * @type {Array<FunnelQuerySteps>}
     * @memberof FunnelQuery
     */
    steps?: Array<FunnelQuerySteps>;
    /**
     * 
     * @type {FunnelQueryTimeWindow}
     * @memberof FunnelQuery
     */
    timeWindow: FunnelQueryTimeWindow;
    /**
     * 
     * @type {FunnelConversionStepsChartType | FunnelConversionOverTimeChartType | FunnelTimeToConvertChartType | FunnelFrequencyChartType}
     * @memberof FunnelQuery
     */
    chartType?: FunnelConversionStepsChartType | FunnelConversionOverTimeChartType | FunnelTimeToConvertChartType | FunnelFrequencyChartType;
    /**
     * 
     * @type {string}
     * @memberof FunnelQuery
     */
    count?: FunnelQueryCountEnum;
    /**
     * 
     * @type {string}
     * @memberof FunnelQuery
     */
    stepOrder?: FunnelQueryStepOrderEnum;
    /**
     * 
     * @type {any}
     * @memberof FunnelQuery
     */
    attribution?: any;
    /**
     * 
     * @type {Array<PropertyRef>}
     * @memberof FunnelQuery
     */
    holdingConstants?: Array<PropertyRef>;
    /**
     * 
     * @type {Array<FunnelEvent & FunnelExcludeSteps>}
     * @memberof FunnelQuery
     */
    exclude?: Array<FunnelEvent & FunnelExcludeSteps>;
    /**
     * array of breakdowns
     * @type {Array<BreakdownByProperty>}
     * @memberof FunnelQuery
     */
    breakdowns?: Array<BreakdownByProperty>;
    /**
     * array of segments
     * @type {Array<EventSegmentationSegment>}
     * @memberof FunnelQuery
     */
    segments?: Array<EventSegmentationSegment>;
    /**
     * 
     * @type {EventFilters}
     * @memberof FunnelQuery
     */
    filters?: EventFilters;
}

/**
    * @export
    * @enum {string}
    */
export enum FunnelQueryCountEnum {
    Uniques = 'uniques',
    Totals = 'totals'
}
/**
    * @export
    * @enum {string}
    */
export enum FunnelQueryStepOrderEnum {
    Any = 'any',
    ExactSequence = 'exactSequence',
    ExactOrder = 'exactOrder'
}

