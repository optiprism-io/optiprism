/* tslint:disable */
/* eslint-disable */
/**
 * OptiPrism
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@optiprism.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    'createdBy'?: number;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    'updatedBy'?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'role'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof Account
     */
    'teams'?: Array<number>;
    /**
     * 
     * @type {Array<AccountProjectsInner>}
     * @memberof Account
     */
    'projects'?: Array<AccountProjectsInner>;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AccountProjectsInner
 */
export interface AccountProjectsInner {
    /**
     * 
     * @type {number}
     * @memberof AccountProjectsInner
     */
    'projectId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountProjectsInner
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface AnalysisCumulative
 */
export interface AnalysisCumulative {
    /**
     * 
     * @type {string}
     * @memberof AnalysisCumulative
     */
    'type': AnalysisCumulativeTypeEnum;
}

export const AnalysisCumulativeTypeEnum = {
    Cumulative: 'cumulative'
} as const;

export type AnalysisCumulativeTypeEnum = typeof AnalysisCumulativeTypeEnum[keyof typeof AnalysisCumulativeTypeEnum];

/**
 * 
 * @export
 * @interface AnalysisLinear
 */
export interface AnalysisLinear {
    /**
     * 
     * @type {string}
     * @memberof AnalysisLinear
     */
    'type': AnalysisLinearTypeEnum;
}

export const AnalysisLinearTypeEnum = {
    Linear: 'linear'
} as const;

export type AnalysisLinearTypeEnum = typeof AnalysisLinearTypeEnum[keyof typeof AnalysisLinearTypeEnum];

/**
 * 
 * @export
 * @interface AnalysisLogarithmic
 */
export interface AnalysisLogarithmic {
    /**
     * 
     * @type {string}
     * @memberof AnalysisLogarithmic
     */
    'type': AnalysisLogarithmicTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof AnalysisLogarithmic
     */
    'window'?: number;
}

export const AnalysisLogarithmicTypeEnum = {
    Logarithmic: 'logarithmic'
} as const;

export type AnalysisLogarithmicTypeEnum = typeof AnalysisLogarithmicTypeEnum[keyof typeof AnalysisLogarithmicTypeEnum];

/**
 * 
 * @export
 * @interface AnalysisRollingAverage
 */
export interface AnalysisRollingAverage {
    /**
     * 
     * @type {string}
     * @memberof AnalysisRollingAverage
     */
    'type': AnalysisRollingAverageTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof AnalysisRollingAverage
     */
    'window': number;
    /**
     * 
     * @type {TimeUnit}
     * @memberof AnalysisRollingAverage
     */
    'unit': TimeUnit;
}

export const AnalysisRollingAverageTypeEnum = {
    RollingAverage: 'rollingAverage'
} as const;

export type AnalysisRollingAverageTypeEnum = typeof AnalysisRollingAverageTypeEnum[keyof typeof AnalysisRollingAverageTypeEnum];

/**
 * breakdown by property.
 * @export
 * @interface BreakdownByProperty
 */
export interface BreakdownByProperty {
    /**
     * 
     * @type {string}
     * @memberof BreakdownByProperty
     */
    'propertyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof BreakdownByProperty
     */
    'propertyId'?: number;
    /**
     * 
     * @type {PropertyType}
     * @memberof BreakdownByProperty
     */
    'propertyType': PropertyType;
    /**
     * 
     * @type {string}
     * @memberof BreakdownByProperty
     */
    'type': BreakdownByPropertyTypeEnum;
}

export const BreakdownByPropertyTypeEnum = {
    Property: 'property'
} as const;

export type BreakdownByPropertyTypeEnum = typeof BreakdownByPropertyTypeEnum[keyof typeof BreakdownByPropertyTypeEnum];

/**
 * 
 * @export
 * @interface BreakdownByPropertyAllOf
 */
export interface BreakdownByPropertyAllOf {
    /**
     * 
     * @type {string}
     * @memberof BreakdownByPropertyAllOf
     */
    'type'?: BreakdownByPropertyAllOfTypeEnum;
}

export const BreakdownByPropertyAllOfTypeEnum = {
    Property: 'property'
} as const;

export type BreakdownByPropertyAllOfTypeEnum = typeof BreakdownByPropertyAllOfTypeEnum[keyof typeof BreakdownByPropertyAllOfTypeEnum];

/**
 * Custom Event is an alias to an expression which is used while querying. You can use regular or custom events in expression. You can combine events in expression, you can use filter by properties. 
 * @export
 * @interface CreateCustomEventRequest
 */
export interface CreateCustomEventRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCustomEventRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomEventRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateCustomEventRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {Array<CustomEventEvent>}
     * @memberof CreateCustomEventRequest
     */
    'events': Array<CustomEventEvent>;
}
/**
 * 
 * @export
 * @interface CreateDashboardRequest
 */
export interface CreateDashboardRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateDashboardRequest
     */
    'tags'?: Array<string>;
    /**
     * dashboard name
     * @type {string}
     * @memberof CreateDashboardRequest
     */
    'name': string;
    /**
     * description
     * @type {string}
     * @memberof CreateDashboardRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<DashboardPanel>}
     * @memberof CreateDashboardRequest
     */
    'panels'?: Array<DashboardPanel>;
}
/**
 * 
 * @export
 * @interface CreateReportRequest
 */
export interface CreateReportRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateReportRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateReportRequest
     */
    'name': string;
    /**
     * description
     * @type {string}
     * @memberof CreateReportRequest
     */
    'description'?: string;
    /**
     * 
     * @type {ReportType}
     * @memberof CreateReportRequest
     */
    'type': ReportType;
    /**
     * 
     * @type {ReportQuery}
     * @memberof CreateReportRequest
     */
    'query': ReportQuery;
}
/**
 * Custom Event is an alias to an expression which is used while querying. You can use regular or custom events in expression. You can combine events in expression, you can use filter by properties. 
 * @export
 * @interface CustomEvent
 */
export interface CustomEvent {
    /**
     * 
     * @type {number}
     * @memberof CustomEvent
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CustomEvent
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof CustomEvent
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomEvent
     */
    'createdBy': number;
    /**
     * 
     * @type {number}
     * @memberof CustomEvent
     */
    'updatedBy'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomEvent
     */
    'projectId': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomEvent
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CustomEvent
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomEvent
     */
    'description'?: string;
    /**
     * 
     * @type {CustomEventStatus}
     * @memberof CustomEvent
     */
    'status': CustomEventStatus;
    /**
     * 
     * @type {boolean}
     * @memberof CustomEvent
     */
    'isSystem': boolean;
    /**
     * 
     * @type {Array<CustomEventEvent>}
     * @memberof CustomEvent
     */
    'events': Array<CustomEventEvent>;
}
/**
 * custom event will matches all of the provided events
 * @export
 * @interface CustomEventEvent
 */
export interface CustomEventEvent {
    /**
     * 
     * @type {string}
     * @memberof CustomEventEvent
     */
    'eventName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomEventEvent
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventType}
     * @memberof CustomEventEvent
     */
    'eventType': EventType;
    /**
     * array of event filters
     * @type {Array<EventFilterByProperty>}
     * @memberof CustomEventEvent
     */
    'filters'?: Array<EventFilterByProperty>;
}
/**
 * 
 * @export
 * @interface CustomEventEventAllOf
 */
export interface CustomEventEventAllOf {
    /**
     * array of event filters
     * @type {Array<EventFilterByProperty>}
     * @memberof CustomEventEventAllOf
     */
    'filters'?: Array<EventFilterByProperty>;
}
/**
 * custom event status
 * @export
 * @enum {string}
 */

export const CustomEventStatus = {
    Enabled: 'enabled',
    Disabled: 'disabled'
} as const;

export type CustomEventStatus = typeof CustomEventStatus[keyof typeof CustomEventStatus];


/**
 * 
 * @export
 * @interface CustomEventsList200Response
 */
export interface CustomEventsList200Response {
    /**
     * 
     * @type {Array<CustomEvent>}
     * @memberof CustomEventsList200Response
     */
    'events'?: Array<CustomEvent>;
    /**
     * 
     * @type {ListResponseMetadataMeta}
     * @memberof CustomEventsList200Response
     */
    'meta'?: ListResponseMetadataMeta;
}
/**
 * 
 * @export
 * @interface CustomEventsList200ResponseAllOf
 */
export interface CustomEventsList200ResponseAllOf {
    /**
     * 
     * @type {Array<CustomEvent>}
     * @memberof CustomEventsList200ResponseAllOf
     */
    'events'?: Array<CustomEvent>;
}
/**
 * 
 * @export
 * @interface CustomPropertiesList200Response
 */
export interface CustomPropertiesList200Response {
    /**
     * 
     * @type {Array<CustomProperty>}
     * @memberof CustomPropertiesList200Response
     */
    'events'?: Array<CustomProperty>;
    /**
     * 
     * @type {ListResponseMetadataMeta}
     * @memberof CustomPropertiesList200Response
     */
    'meta'?: ListResponseMetadataMeta;
}
/**
 * 
 * @export
 * @interface CustomProperty
 */
export interface CustomProperty {
    /**
     * 
     * @type {number}
     * @memberof CustomProperty
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomProperty
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomProperty
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomProperty
     */
    'createdBy'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomProperty
     */
    'updatedBy'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomProperty
     */
    'projectId'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CustomProperty
     */
    'events'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof CustomProperty
     */
    'isSystem'?: boolean;
    /**
     * 
     * @type {CustomPropertyStatus}
     * @memberof CustomProperty
     */
    'status'?: CustomPropertyStatus;
    /**
     * 
     * @type {string}
     * @memberof CustomProperty
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomProperty
     */
    'description'?: string;
    /**
     * 
     * @type {DataType}
     * @memberof CustomProperty
     */
    'type'?: DataType;
    /**
     * 
     * @type {boolean}
     * @memberof CustomProperty
     */
    'nullable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomProperty
     */
    'isArray'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomProperty
     */
    'tags'?: Array<string>;
}
/**
 * custom property status
 * @export
 * @enum {string}
 */

export const CustomPropertyStatus = {
    Enabled: 'enabled',
    Disabled: 'disabled'
} as const;

export type CustomPropertyStatus = typeof CustomPropertyStatus[keyof typeof CustomPropertyStatus];


/**
 * 
 * @export
 * @interface Dashboard
 */
export interface Dashboard {
    /**
     * dashboard unique id
     * @type {number}
     * @memberof Dashboard
     */
    'id': number;
    /**
     * create date
     * @type {string}
     * @memberof Dashboard
     */
    'createdAt'?: string;
    /**
     * update (once updated)
     * @type {string}
     * @memberof Dashboard
     */
    'updatedAt'?: string;
    /**
     * id of creator User
     * @type {number}
     * @memberof Dashboard
     */
    'createdBy'?: number;
    /**
     * id of updater User
     * @type {number}
     * @memberof Dashboard
     */
    'updatedBy'?: number;
    /**
     * project id
     * @type {number}
     * @memberof Dashboard
     */
    'projectId'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Dashboard
     */
    'tags'?: Array<string>;
    /**
     * event name. Must be unique among all project events (including custom). The name field is used while events ingesting.
     * @type {string}
     * @memberof Dashboard
     */
    'name': string;
    /**
     * description
     * @type {string}
     * @memberof Dashboard
     */
    'description'?: string;
    /**
     * 
     * @type {Array<DashboardPanel>}
     * @memberof Dashboard
     */
    'panels'?: Array<DashboardPanel>;
}
/**
 * 
 * @export
 * @interface DashboardPanel
 */
export interface DashboardPanel {
    /**
     * 
     * @type {string}
     * @memberof DashboardPanel
     */
    'type': DashboardPanelTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DashboardPanel
     */
    'reportId': number;
    /**
     * x
     * @type {number}
     * @memberof DashboardPanel
     */
    'x': number;
    /**
     * y
     * @type {number}
     * @memberof DashboardPanel
     */
    'y': number;
    /**
     * width
     * @type {number}
     * @memberof DashboardPanel
     */
    'w': number;
    /**
     * height
     * @type {number}
     * @memberof DashboardPanel
     */
    'h': number;
}

export const DashboardPanelTypeEnum = {
    Report: 'report'
} as const;

export type DashboardPanelTypeEnum = typeof DashboardPanelTypeEnum[keyof typeof DashboardPanelTypeEnum];

/**
 * 
 * @export
 * @interface DashboardsList200Response
 */
export interface DashboardsList200Response {
    /**
     * 
     * @type {Array<Dashboard>}
     * @memberof DashboardsList200Response
     */
    'data'?: Array<Dashboard>;
    /**
     * 
     * @type {ListResponseMetadataMeta}
     * @memberof DashboardsList200Response
     */
    'meta'?: ListResponseMetadataMeta;
}
/**
 * 
 * @export
 * @interface DashboardsList200ResponseAllOf
 */
export interface DashboardsList200ResponseAllOf {
    /**
     * 
     * @type {Array<Dashboard>}
     * @memberof DashboardsList200ResponseAllOf
     */
    'data'?: Array<Dashboard>;
}
/**
 * 
 * @export
 * @interface DataTableResponse
 */
export interface DataTableResponse {
    /**
     * 
     * @type {Array<DataTableResponseColumnsInner>}
     * @memberof DataTableResponse
     */
    'columns'?: Array<DataTableResponseColumnsInner>;
}
/**
 * 
 * @export
 * @interface DataTableResponseColumnsInner
 */
export interface DataTableResponseColumnsInner {
    /**
     * 
     * @type {string}
     * @memberof DataTableResponseColumnsInner
     */
    'type': DataTableResponseColumnsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DataTableResponseColumnsInner
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof DataTableResponseColumnsInner
     */
    'isNullable': boolean;
    /**
     * 
     * @type {DataType}
     * @memberof DataTableResponseColumnsInner
     */
    'dataType': DataType;
    /**
     * 
     * @type {DataTableResponseColumnsInnerData}
     * @memberof DataTableResponseColumnsInner
     */
    'data': DataTableResponseColumnsInnerData;
    /**
     * 
     * @type {number}
     * @memberof DataTableResponseColumnsInner
     */
    'step'?: number;
    /**
     * 
     * @type {DataTableResponseColumnsInnerData}
     * @memberof DataTableResponseColumnsInner
     */
    'compareValues'?: DataTableResponseColumnsInnerData;
}

export const DataTableResponseColumnsInnerTypeEnum = {
    Dimension: 'dimension',
    Metric: 'metric',
    MetricValue: 'metricValue',
    FunnelMetricValue: 'funnelMetricValue'
} as const;

export type DataTableResponseColumnsInnerTypeEnum = typeof DataTableResponseColumnsInnerTypeEnum[keyof typeof DataTableResponseColumnsInnerTypeEnum];

/**
 * @type DataTableResponseColumnsInnerData
 * @export
 */
export type DataTableResponseColumnsInnerData = Array<boolean> | Array<number> | Array<string>;

/**
 * data type
 * @export
 * @enum {string}
 */

export const DataType = {
    String: 'string',
    Number: 'number',
    Boolean: 'boolean'
} as const;

export type DataType = typeof DataType[keyof typeof DataType];


/**
 * dictionary data type
 * @export
 * @enum {string}
 */

export const DictionaryDataType = {
    Uint8: 'uint8',
    Uint16: 'uint16',
    Uint32: 'uint32',
    Uint64: 'uint64'
} as const;

export type DictionaryDataType = typeof DictionaryDataType[keyof typeof DictionaryDataType];


/**
 * aggregate property and compare to value
 * @export
 * @interface DidEventAggregateProperty
 */
export interface DidEventAggregateProperty {
    /**
     * 
     * @type {string}
     * @memberof DidEventAggregateProperty
     */
    'propertyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DidEventAggregateProperty
     */
    'propertyId'?: number;
    /**
     * 
     * @type {PropertyType}
     * @memberof DidEventAggregateProperty
     */
    'propertyType': PropertyType;
    /**
     * 
     * @type {string}
     * @memberof DidEventAggregateProperty
     */
    'type': DidEventAggregatePropertyTypeEnum;
    /**
     * 
     * @type {QueryAggregate}
     * @memberof DidEventAggregateProperty
     */
    'aggregate': QueryAggregate;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof DidEventAggregateProperty
     */
    'operation': PropertyFilterOperation;
    /**
     * 
     * @type {Value}
     * @memberof DidEventAggregateProperty
     */
    'value'?: Value;
    /**
     * time frame
     * @type {TimeBetween | TimeLast | TimeAfterFirstUse | TimeWindowEach}
     * @memberof DidEventAggregateProperty
     */
    'time': TimeBetween | TimeLast | TimeAfterFirstUse | TimeWindowEach;
}

export const DidEventAggregatePropertyTypeEnum = {
    AggregateProperty: 'aggregateProperty'
} as const;

export type DidEventAggregatePropertyTypeEnum = typeof DidEventAggregatePropertyTypeEnum[keyof typeof DidEventAggregatePropertyTypeEnum];

/**
 * 
 * @export
 * @interface DidEventAggregatePropertyAllOf
 */
export interface DidEventAggregatePropertyAllOf {
    /**
     * 
     * @type {string}
     * @memberof DidEventAggregatePropertyAllOf
     */
    'type'?: DidEventAggregatePropertyAllOfTypeEnum;
    /**
     * 
     * @type {QueryAggregate}
     * @memberof DidEventAggregatePropertyAllOf
     */
    'aggregate'?: QueryAggregate;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof DidEventAggregatePropertyAllOf
     */
    'operation'?: PropertyFilterOperation;
    /**
     * 
     * @type {Value}
     * @memberof DidEventAggregatePropertyAllOf
     */
    'value'?: Value;
    /**
     * time frame
     * @type {TimeBetween | TimeLast | TimeAfterFirstUse | TimeWindowEach}
     * @memberof DidEventAggregatePropertyAllOf
     */
    'time'?: TimeBetween | TimeLast | TimeAfterFirstUse | TimeWindowEach;
}

export const DidEventAggregatePropertyAllOfTypeEnum = {
    AggregateProperty: 'aggregateProperty'
} as const;

export type DidEventAggregatePropertyAllOfTypeEnum = typeof DidEventAggregatePropertyAllOfTypeEnum[keyof typeof DidEventAggregatePropertyAllOfTypeEnum];

/**
 * find all users who made event X times
 * @export
 * @interface DidEventCount
 */
export interface DidEventCount {
    /**
     * 
     * @type {string}
     * @memberof DidEventCount
     */
    'type': DidEventCountTypeEnum;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof DidEventCount
     */
    'operation': PropertyFilterOperation;
    /**
     * one or more values. Doesn\'t need if operation is \"empty\" or \"exist\"
     * @type {number}
     * @memberof DidEventCount
     */
    'value': number;
    /**
     * 
     * @type {DidEventCountTime}
     * @memberof DidEventCount
     */
    'time': DidEventCountTime;
}

export const DidEventCountTypeEnum = {
    Count: 'count'
} as const;

export type DidEventCountTypeEnum = typeof DidEventCountTypeEnum[keyof typeof DidEventCountTypeEnum];

/**
 * @type DidEventCountTime
 * time frame
 * @export
 */
export type DidEventCountTime = TimeAfterFirstUse | TimeBetween | TimeLast | TimeWindowEach;

/**
 * find users with Nth event occurance
 * @export
 * @interface DidEventHistoricalCount
 */
export interface DidEventHistoricalCount {
    /**
     * 
     * @type {string}
     * @memberof DidEventHistoricalCount
     */
    'type': DidEventHistoricalCountTypeEnum;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof DidEventHistoricalCount
     */
    'operation': PropertyFilterOperation;
    /**
     * 
     * @type {number}
     * @memberof DidEventHistoricalCount
     */
    'value'?: number;
    /**
     * 
     * @type {DidEventHistoricalCountTime}
     * @memberof DidEventHistoricalCount
     */
    'time': DidEventHistoricalCountTime;
}

export const DidEventHistoricalCountTypeEnum = {
    HistoricalCount: 'historicalCount'
} as const;

export type DidEventHistoricalCountTypeEnum = typeof DidEventHistoricalCountTypeEnum[keyof typeof DidEventHistoricalCountTypeEnum];

/**
 * @type DidEventHistoricalCountTime
 * @export
 */
export type DidEventHistoricalCountTime = TimeAfterFirstUse | TimeBetween | TimeLast | TimeWindowEach;

/**
 * find all users who made left event X time more/less than right event.
 * @export
 * @interface DidEventRelativeCount
 */
export interface DidEventRelativeCount {
    /**
     * 
     * @type {string}
     * @memberof DidEventRelativeCount
     */
    'eventName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DidEventRelativeCount
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventType}
     * @memberof DidEventRelativeCount
     */
    'eventType': EventType;
    /**
     * 
     * @type {Array<EventFilterByProperty>}
     * @memberof DidEventRelativeCount
     */
    'filters'?: Array<EventFilterByProperty>;
    /**
     * 
     * @type {string}
     * @memberof DidEventRelativeCount
     */
    'type': DidEventRelativeCountTypeEnum;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof DidEventRelativeCount
     */
    'operation': PropertyFilterOperation;
    /**
     * 
     * @type {TimeBetween | TimeLast | TimeAfterFirstUse | TimeWindowEach}
     * @memberof DidEventRelativeCount
     */
    'time': TimeBetween | TimeLast | TimeAfterFirstUse | TimeWindowEach;
}

export const DidEventRelativeCountTypeEnum = {
    RelativeCount: 'relativeCount'
} as const;

export type DidEventRelativeCountTypeEnum = typeof DidEventRelativeCountTypeEnum[keyof typeof DidEventRelativeCountTypeEnum];

/**
 * 
 * @export
 * @interface DidEventRelativeCountAllOf
 */
export interface DidEventRelativeCountAllOf {
    /**
     * 
     * @type {Array<EventFilterByProperty>}
     * @memberof DidEventRelativeCountAllOf
     */
    'filters'?: Array<EventFilterByProperty>;
    /**
     * 
     * @type {string}
     * @memberof DidEventRelativeCountAllOf
     */
    'type'?: DidEventRelativeCountAllOfTypeEnum;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof DidEventRelativeCountAllOf
     */
    'operation'?: PropertyFilterOperation;
    /**
     * 
     * @type {TimeBetween | TimeLast | TimeAfterFirstUse | TimeWindowEach}
     * @memberof DidEventRelativeCountAllOf
     */
    'time'?: TimeBetween | TimeLast | TimeAfterFirstUse | TimeWindowEach;
}

export const DidEventRelativeCountAllOfTypeEnum = {
    RelativeCount: 'relativeCount'
} as const;

export type DidEventRelativeCountAllOfTypeEnum = typeof DidEventRelativeCountAllOfTypeEnum[keyof typeof DidEventRelativeCountAllOfTypeEnum];

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'code'?: ErrorResponseCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ErrorResponse
     */
    'fields'?: { [key: string]: string; };
}

export const ErrorResponseCodeEnum = {
    _1000InvalidToken: '1000_invalid_token'
} as const;

export type ErrorResponseCodeEnum = typeof ErrorResponseCodeEnum[keyof typeof ErrorResponseCodeEnum];

/**
 * Event describes user event. User event is an action which user (client) might do on a product site/app. For instance, user might do a signup and it might be a \"Sign up\" event. Event Also has a properties. <br/><br/> Name must be unique among project events, including custom ones. E.g. you can\'t have multiple \"Sign up\" events. <br/><br/> Normally events are created and updated by admin in a project scope, but there are also system events, which can\'t be deleted or modified. 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * event unique id
     * @type {number}
     * @memberof Event
     */
    'id': number;
    /**
     * create date
     * @type {string}
     * @memberof Event
     */
    'createdAt': string;
    /**
     * update (once updated)
     * @type {string}
     * @memberof Event
     */
    'updatedAt'?: string;
    /**
     * id of creator User
     * @type {number}
     * @memberof Event
     */
    'createdBy': number;
    /**
     * id of updater User
     * @type {number}
     * @memberof Event
     */
    'updatedBy'?: number;
    /**
     * project id
     * @type {number}
     * @memberof Event
     */
    'projectId': number;
    /**
     * the event is a system-wide, shown in any project and can\'t be modified by a regular user
     * @type {boolean}
     * @memberof Event
     */
    'isSystem': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Event
     */
    'tags'?: Array<string>;
    /**
     * event name. Must be unique among all project events (including custom). The name field is used while events ingesting.
     * @type {string}
     * @memberof Event
     */
    'name': string;
    /**
     * event name to display. If empty then name property is used.
     * @type {string}
     * @memberof Event
     */
    'displayName'?: string;
    /**
     * description
     * @type {string}
     * @memberof Event
     */
    'description'?: string;
    /**
     * 
     * @type {EventStatus}
     * @memberof Event
     */
    'status': EventStatus;
    /**
     * array of id of attached to event properties
     * @type {Array<number>}
     * @memberof Event
     */
    'eventProperties'?: Array<number>;
    /**
     * array of id of attached to user properties
     * @type {Array<number>}
     * @memberof Event
     */
    'userProperties'?: Array<number>;
}
/**
 * chart type
 * @export
 * @enum {string}
 */

export const EventChartType = {
    Line: 'line',
    Bar: 'bar',
    SingleValue: 'singleValue'
} as const;

export type EventChartType = typeof EventChartType[keyof typeof EventChartType];


/**
 * 
 * @export
 * @interface EventFilterByCohort
 */
export interface EventFilterByCohort {
    /**
     * 
     * @type {string}
     * @memberof EventFilterByCohort
     */
    'type': EventFilterByCohortTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof EventFilterByCohort
     */
    'cohortId': number;
}

export const EventFilterByCohortTypeEnum = {
    Cohort: 'cohort'
} as const;

export type EventFilterByCohortTypeEnum = typeof EventFilterByCohortTypeEnum[keyof typeof EventFilterByCohortTypeEnum];

/**
 * 
 * @export
 * @interface EventFilterByGroup
 */
export interface EventFilterByGroup {
    /**
     * 
     * @type {string}
     * @memberof EventFilterByGroup
     */
    'type': EventFilterByGroupTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof EventFilterByGroup
     */
    'groupId': number;
}

export const EventFilterByGroupTypeEnum = {
    Group: 'group'
} as const;

export type EventFilterByGroupTypeEnum = typeof EventFilterByGroupTypeEnum[keyof typeof EventFilterByGroupTypeEnum];

/**
 * filter by property
 * @export
 * @interface EventFilterByProperty
 */
export interface EventFilterByProperty {
    /**
     * 
     * @type {string}
     * @memberof EventFilterByProperty
     */
    'propertyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventFilterByProperty
     */
    'propertyId'?: number;
    /**
     * 
     * @type {PropertyType}
     * @memberof EventFilterByProperty
     */
    'propertyType': PropertyType;
    /**
     * 
     * @type {string}
     * @memberof EventFilterByProperty
     */
    'type': EventFilterByPropertyTypeEnum;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof EventFilterByProperty
     */
    'operation': PropertyFilterOperation;
    /**
     * one or several property values. May be not set if operation is \"empty\" or \"exist\"
     * @type {Array<Value>}
     * @memberof EventFilterByProperty
     */
    'value'?: Array<Value>;
}

export const EventFilterByPropertyTypeEnum = {
    Property: 'property'
} as const;

export type EventFilterByPropertyTypeEnum = typeof EventFilterByPropertyTypeEnum[keyof typeof EventFilterByPropertyTypeEnum];

/**
 * 
 * @export
 * @interface EventFilterByPropertyAllOf
 */
export interface EventFilterByPropertyAllOf {
    /**
     * 
     * @type {string}
     * @memberof EventFilterByPropertyAllOf
     */
    'type'?: EventFilterByPropertyAllOfTypeEnum;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof EventFilterByPropertyAllOf
     */
    'operation'?: PropertyFilterOperation;
    /**
     * one or several property values. May be not set if operation is \"empty\" or \"exist\"
     * @type {Array<Value>}
     * @memberof EventFilterByPropertyAllOf
     */
    'value'?: Array<Value>;
}

export const EventFilterByPropertyAllOfTypeEnum = {
    Property: 'property'
} as const;

export type EventFilterByPropertyAllOfTypeEnum = typeof EventFilterByPropertyAllOfTypeEnum[keyof typeof EventFilterByPropertyAllOfTypeEnum];

/**
 * event filters
 * @export
 * @interface EventGroupedFilters
 */
export interface EventGroupedFilters {
    /**
     * 
     * @type {string}
     * @memberof EventGroupedFilters
     */
    'groupsCondition'?: EventGroupedFiltersGroupsConditionEnum;
    /**
     * 
     * @type {Array<EventGroupedFiltersGroupsInner>}
     * @memberof EventGroupedFilters
     */
    'groups': Array<EventGroupedFiltersGroupsInner>;
}

export const EventGroupedFiltersGroupsConditionEnum = {
    And: 'and',
    Or: 'or'
} as const;

export type EventGroupedFiltersGroupsConditionEnum = typeof EventGroupedFiltersGroupsConditionEnum[keyof typeof EventGroupedFiltersGroupsConditionEnum];

/**
 * 
 * @export
 * @interface EventGroupedFiltersGroupsInner
 */
export interface EventGroupedFiltersGroupsInner {
    /**
     * 
     * @type {string}
     * @memberof EventGroupedFiltersGroupsInner
     */
    'filtersCondition'?: EventGroupedFiltersGroupsInnerFiltersConditionEnum;
    /**
     * 
     * @type {Array<EventGroupedFiltersGroupsInnerFiltersInner>}
     * @memberof EventGroupedFiltersGroupsInner
     */
    'filters': Array<EventGroupedFiltersGroupsInnerFiltersInner>;
}

export const EventGroupedFiltersGroupsInnerFiltersConditionEnum = {
    And: 'and',
    Or: 'or'
} as const;

export type EventGroupedFiltersGroupsInnerFiltersConditionEnum = typeof EventGroupedFiltersGroupsInnerFiltersConditionEnum[keyof typeof EventGroupedFiltersGroupsInnerFiltersConditionEnum];

/**
 * 
 * @export
 * @interface EventGroupedFiltersGroupsInnerFiltersInner
 */
export interface EventGroupedFiltersGroupsInnerFiltersInner {
    /**
     * 
     * @type {string}
     * @memberof EventGroupedFiltersGroupsInnerFiltersInner
     */
    'type': EventGroupedFiltersGroupsInnerFiltersInnerTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof EventGroupedFiltersGroupsInnerFiltersInner
     */
    'cohortId': number;
    /**
     * 
     * @type {string}
     * @memberof EventGroupedFiltersGroupsInnerFiltersInner
     */
    'propertyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventGroupedFiltersGroupsInnerFiltersInner
     */
    'propertyId'?: number;
    /**
     * 
     * @type {PropertyType}
     * @memberof EventGroupedFiltersGroupsInnerFiltersInner
     */
    'propertyType': PropertyType;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof EventGroupedFiltersGroupsInnerFiltersInner
     */
    'operation': PropertyFilterOperation;
    /**
     * one or several property values. May be not set if operation is \"empty\" or \"exist\"
     * @type {Array<Value>}
     * @memberof EventGroupedFiltersGroupsInnerFiltersInner
     */
    'value'?: Array<Value>;
    /**
     * 
     * @type {number}
     * @memberof EventGroupedFiltersGroupsInnerFiltersInner
     */
    'groupId': number;
}

export const EventGroupedFiltersGroupsInnerFiltersInnerTypeEnum = {
    Group: 'group'
} as const;

export type EventGroupedFiltersGroupsInnerFiltersInnerTypeEnum = typeof EventGroupedFiltersGroupsInnerFiltersInnerTypeEnum[keyof typeof EventGroupedFiltersGroupsInnerFiltersInnerTypeEnum];

/**
 * 
 * @export
 * @interface EventRecord
 */
export interface EventRecord {
    /**
     * 
     * @type {number}
     * @memberof EventRecord
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EventRecord
     */
    'name': string;
    /**
     * map of property name and property value pairs
     * @type {{ [key: string]: Value; }}
     * @memberof EventRecord
     */
    'eventProperties'?: { [key: string]: Value; };
    /**
     * map of user name and property value pairs
     * @type {{ [key: string]: Value; }}
     * @memberof EventRecord
     */
    'userProperties'?: { [key: string]: Value; };
    /**
     * 
     * @type {Array<EventRecordMatchedCustomEventsInner>}
     * @memberof EventRecord
     */
    'matchedCustomEvents'?: Array<EventRecordMatchedCustomEventsInner>;
}
/**
 * 
 * @export
 * @interface EventRecordMatchedCustomEventsInner
 */
export interface EventRecordMatchedCustomEventsInner {
    /**
     * 
     * @type {number}
     * @memberof EventRecordMatchedCustomEventsInner
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface EventRecordRequestEvent
 */
export interface EventRecordRequestEvent {
    /**
     * 
     * @type {string}
     * @memberof EventRecordRequestEvent
     */
    'eventName'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventRecordRequestEvent
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventType}
     * @memberof EventRecordRequestEvent
     */
    'eventType': EventType;
    /**
     * array of event filters
     * @type {Array<EventRecordRequestEventFiltersFiltersInner>}
     * @memberof EventRecordRequestEvent
     */
    'filters'?: Array<EventRecordRequestEventFiltersFiltersInner>;
}
/**
 * 
 * @export
 * @interface EventRecordRequestEventFilters
 */
export interface EventRecordRequestEventFilters {
    /**
     * array of event filters
     * @type {Array<EventRecordRequestEventFiltersFiltersInner>}
     * @memberof EventRecordRequestEventFilters
     */
    'filters'?: Array<EventRecordRequestEventFiltersFiltersInner>;
}
/**
 * @type EventRecordRequestEventFiltersFiltersInner
 * @export
 */
export type EventRecordRequestEventFiltersFiltersInner = EventFilterByGroup | EventFilterByProperty;

/**
 * 
 * @export
 * @interface EventRecordsList200Response
 */
export interface EventRecordsList200Response {
    /**
     * 
     * @type {Array<EventRecord>}
     * @memberof EventRecordsList200Response
     */
    'events'?: Array<EventRecord>;
    /**
     * 
     * @type {ListResponseMetadataMeta}
     * @memberof EventRecordsList200Response
     */
    'meta'?: ListResponseMetadataMeta;
}
/**
 * request event records sorted by time of creation
 * @export
 * @interface EventRecordsListRequest
 */
export interface EventRecordsListRequest {
    /**
     * 
     * @type {EventRecordsListRequestTime}
     * @memberof EventRecordsListRequest
     */
    'time': EventRecordsListRequestTime;
    /**
     * 
     * @type {Array<Value>}
     * @memberof EventRecordsListRequest
     */
    'searchInEventProperties'?: Array<Value>;
    /**
     * 
     * @type {Array<Value>}
     * @memberof EventRecordsListRequest
     */
    'searchInUserProperties'?: Array<Value>;
    /**
     * array of events to query
     * @type {Array<EventRecordRequestEvent>}
     * @memberof EventRecordsListRequest
     */
    'events'?: Array<EventRecordRequestEvent>;
    /**
     * 
     * @type {EventGroupedFilters}
     * @memberof EventRecordsListRequest
     */
    'filters'?: EventGroupedFilters;
}
/**
 * @type EventRecordsListRequestTime
 * select time
 * @export
 */
export type EventRecordsListRequestTime = TimeBetween | TimeFrom | TimeLast;

/**
 * reference to event by its name and type
 * @export
 * @interface EventRef
 */
export interface EventRef {
    /**
     * 
     * @type {string}
     * @memberof EventRef
     */
    'eventName'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventRef
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventType}
     * @memberof EventRef
     */
    'eventType': EventType;
}
/**
 * event segmentation report type main payload
 * @export
 * @interface EventSegmentation
 */
export interface EventSegmentation {
    /**
     * 
     * @type {EventRecordsListRequestTime}
     * @memberof EventSegmentation
     */
    'time': EventRecordsListRequestTime;
    /**
     * group that is used in aggregations by group. For instance, group by user or group by organizartion.
     * @type {string}
     * @memberof EventSegmentation
     */
    'group': string;
    /**
     * 
     * @type {TimeUnit}
     * @memberof EventSegmentation
     */
    'intervalUnit': TimeUnit;
    /**
     * 
     * @type {EventChartType}
     * @memberof EventSegmentation
     */
    'chartType': EventChartType;
    /**
     * 
     * @type {EventSegmentationAnalysis}
     * @memberof EventSegmentation
     */
    'analysis': EventSegmentationAnalysis;
    /**
     * 
     * @type {EventSegmentationCompare}
     * @memberof EventSegmentation
     */
    'compare'?: EventSegmentationCompare;
    /**
     * array of events to query
     * @type {Array<EventSegmentationEvent>}
     * @memberof EventSegmentation
     */
    'events': Array<EventSegmentationEvent>;
    /**
     * 
     * @type {EventGroupedFilters}
     * @memberof EventSegmentation
     */
    'filters'?: EventGroupedFilters;
    /**
     * array of common breakdowns (which applies to all events)
     * @type {Array<BreakdownByProperty>}
     * @memberof EventSegmentation
     */
    'breakdowns'?: Array<BreakdownByProperty>;
    /**
     * array of segments
     * @type {Array<EventSegmentationSegment>}
     * @memberof EventSegmentation
     */
    'segments'?: Array<EventSegmentationSegment>;
}
/**
 * @type EventSegmentationAnalysis
 * analysis type
 * @export
 */
export type EventSegmentationAnalysis = AnalysisCumulative | AnalysisLinear | AnalysisRollingAverage;

/**
 * optional comparison with previous period
 * @export
 * @interface EventSegmentationCompare
 */
export interface EventSegmentationCompare {
    /**
     * offset in past in timeUnit
     * @type {number}
     * @memberof EventSegmentationCompare
     */
    'offset': number;
    /**
     * 
     * @type {TimeUnit}
     * @memberof EventSegmentationCompare
     */
    'unit': TimeUnit;
}
/**
 * event object
 * @export
 * @interface EventSegmentationEvent
 */
export interface EventSegmentationEvent {
    /**
     * 
     * @type {string}
     * @memberof EventSegmentationEvent
     */
    'eventName'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventSegmentationEvent
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventType}
     * @memberof EventSegmentationEvent
     */
    'eventType': EventType;
    /**
     * array of event filters
     * @type {Array<EventFilterByProperty>}
     * @memberof EventSegmentationEvent
     */
    'filters'?: Array<EventFilterByProperty>;
    /**
     * 
     * @type {Array<BreakdownByProperty>}
     * @memberof EventSegmentationEvent
     */
    'breakdowns'?: Array<BreakdownByProperty>;
    /**
     * array of event queries
     * @type {Array<QuerySimple | QueryCountPerGroup | QueryAggregatePropertyPerGroup | QueryAggregateProperty | QueryFormula>}
     * @memberof EventSegmentationEvent
     */
    'queries': Array<QuerySimple | QueryCountPerGroup | QueryAggregatePropertyPerGroup | QueryAggregateProperty | QueryFormula>;
}
/**
 * 
 * @export
 * @interface EventSegmentationEventAllOf
 */
export interface EventSegmentationEventAllOf {
    /**
     * array of event filters
     * @type {Array<EventFilterByProperty>}
     * @memberof EventSegmentationEventAllOf
     */
    'filters'?: Array<EventFilterByProperty>;
    /**
     * 
     * @type {Array<BreakdownByProperty>}
     * @memberof EventSegmentationEventAllOf
     */
    'breakdowns'?: Array<BreakdownByProperty>;
    /**
     * array of event queries
     * @type {Array<QuerySimple | QueryCountPerGroup | QueryAggregatePropertyPerGroup | QueryAggregateProperty | QueryFormula>}
     * @memberof EventSegmentationEventAllOf
     */
    'queries'?: Array<QuerySimple | QueryCountPerGroup | QueryAggregatePropertyPerGroup | QueryAggregateProperty | QueryFormula>;
}
/**
 * segment
 * @export
 * @interface EventSegmentationSegment
 */
export interface EventSegmentationSegment {
    /**
     * name of segment
     * @type {string}
     * @memberof EventSegmentationSegment
     */
    'name'?: string;
    /**
     * array of conditions
     * @type {Array<EventSegmentationSegmentConditionsInner>}
     * @memberof EventSegmentationSegment
     */
    'conditions': Array<EventSegmentationSegmentConditionsInner>;
}
/**
 * @type EventSegmentationSegmentConditionsInner
 * @export
 */
export type EventSegmentationSegmentConditionsInner = SegmentConditionDidEvent | SegmentConditionFunnel | SegmentConditionHadPropertyValue | SegmentConditionHasPropertyValue;

/**
 * event status
 * @export
 * @enum {string}
 */

export const EventStatus = {
    Enabled: 'enabled',
    Disabled: 'disabled'
} as const;

export type EventStatus = typeof EventStatus[keyof typeof EventStatus];


/**
 * possible event type
 * @export
 * @enum {string}
 */

export const EventType = {
    Regular: 'regular',
    Custom: 'custom'
} as const;

export type EventType = typeof EventType[keyof typeof EventType];


/**
 * 
 * @export
 * @interface EventsList200Response
 */
export interface EventsList200Response {
    /**
     * 
     * @type {Array<Event>}
     * @memberof EventsList200Response
     */
    'events'?: Array<Event>;
    /**
     * 
     * @type {ListResponseMetadataMeta}
     * @memberof EventsList200Response
     */
    'meta'?: ListResponseMetadataMeta;
}
/**
 * 
 * @export
 * @interface EventsList200ResponseAllOf
 */
export interface EventsList200ResponseAllOf {
    /**
     * 
     * @type {Array<Event>}
     * @memberof EventsList200ResponseAllOf
     */
    'events'?: Array<Event>;
}
/**
 * 
 * @export
 * @interface FunnelConversionOverTimeChartType
 */
export interface FunnelConversionOverTimeChartType {
    /**
     * 
     * @type {string}
     * @memberof FunnelConversionOverTimeChartType
     */
    'type': FunnelConversionOverTimeChartTypeTypeEnum;
    /**
     * 
     * @type {TimeUnit}
     * @memberof FunnelConversionOverTimeChartType
     */
    'intervalUnit': TimeUnit;
}

export const FunnelConversionOverTimeChartTypeTypeEnum = {
    ConversionOverTime: 'conversionOverTime'
} as const;

export type FunnelConversionOverTimeChartTypeTypeEnum = typeof FunnelConversionOverTimeChartTypeTypeEnum[keyof typeof FunnelConversionOverTimeChartTypeTypeEnum];

/**
 * 
 * @export
 * @interface FunnelConversionStepsChartType
 */
export interface FunnelConversionStepsChartType {
    /**
     * 
     * @type {string}
     * @memberof FunnelConversionStepsChartType
     */
    'type': FunnelConversionStepsChartTypeTypeEnum;
}

export const FunnelConversionStepsChartTypeTypeEnum = {
    ConversionSteps: 'conversionSteps'
} as const;

export type FunnelConversionStepsChartTypeTypeEnum = typeof FunnelConversionStepsChartTypeTypeEnum[keyof typeof FunnelConversionStepsChartTypeTypeEnum];

/**
 * 
 * @export
 * @interface FunnelConversionStepsChartTypeResponse
 */
export interface FunnelConversionStepsChartTypeResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof FunnelConversionStepsChartTypeResponse
     */
    'dimensionHeaders'?: Array<string>;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof FunnelConversionStepsChartTypeResponse
     */
    'dimensions'?: Array<Array<string>>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FunnelConversionStepsChartTypeResponse
     */
    'metrics'?: Array<FunnelConversionStepsChartTypeResponseMetricsEnum>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FunnelConversionStepsChartTypeResponse
     */
    'singles'?: Array<number>;
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof FunnelConversionStepsChartTypeResponse
     */
    'series'?: Array<Array<number>>;
}

export const FunnelConversionStepsChartTypeResponseMetricsEnum = {
    AvgTimeToConvert: 'avgTimeToConvert'
} as const;

export type FunnelConversionStepsChartTypeResponseMetricsEnum = typeof FunnelConversionStepsChartTypeResponseMetricsEnum[keyof typeof FunnelConversionStepsChartTypeResponseMetricsEnum];

/**
 * event object
 * @export
 * @interface FunnelEvent
 */
export interface FunnelEvent {
    /**
     * 
     * @type {string}
     * @memberof FunnelEvent
     */
    'eventName'?: string;
    /**
     * 
     * @type {number}
     * @memberof FunnelEvent
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventType}
     * @memberof FunnelEvent
     */
    'eventType': EventType;
    /**
     * array of event filters
     * @type {Array<EventFilterByProperty>}
     * @memberof FunnelEvent
     */
    'filters': Array<EventFilterByProperty>;
}
/**
 * 
 * @export
 * @interface FunnelEventAllOf
 */
export interface FunnelEventAllOf {
    /**
     * array of event filters
     * @type {Array<EventFilterByProperty>}
     * @memberof FunnelEventAllOf
     */
    'filters'?: Array<EventFilterByProperty>;
}
/**
 * 
 * @export
 * @interface FunnelExcludeSteps
 */
export interface FunnelExcludeSteps {
    /**
     * 
     * @type {FunnelExcludeStepsSteps}
     * @memberof FunnelExcludeSteps
     */
    'steps': FunnelExcludeStepsSteps;
}
/**
 * @type FunnelExcludeStepsSteps
 * @export
 */
export type FunnelExcludeStepsSteps = FunnelExcludeStepsStepsOneOf | FunnelExcludeStepsStepsOneOf1;

/**
 * 
 * @export
 * @interface FunnelExcludeStepsStepsOneOf
 */
export interface FunnelExcludeStepsStepsOneOf {
    /**
     * 
     * @type {string}
     * @memberof FunnelExcludeStepsStepsOneOf
     */
    'type'?: FunnelExcludeStepsStepsOneOfTypeEnum;
}

export const FunnelExcludeStepsStepsOneOfTypeEnum = {
    All: 'all'
} as const;

export type FunnelExcludeStepsStepsOneOfTypeEnum = typeof FunnelExcludeStepsStepsOneOfTypeEnum[keyof typeof FunnelExcludeStepsStepsOneOfTypeEnum];

/**
 * 
 * @export
 * @interface FunnelExcludeStepsStepsOneOf1
 */
export interface FunnelExcludeStepsStepsOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof FunnelExcludeStepsStepsOneOf1
     */
    'type': FunnelExcludeStepsStepsOneOf1TypeEnum;
    /**
     * 
     * @type {number}
     * @memberof FunnelExcludeStepsStepsOneOf1
     */
    'from': number;
    /**
     * 
     * @type {number}
     * @memberof FunnelExcludeStepsStepsOneOf1
     */
    'to': number;
}

export const FunnelExcludeStepsStepsOneOf1TypeEnum = {
    Between: 'between'
} as const;

export type FunnelExcludeStepsStepsOneOf1TypeEnum = typeof FunnelExcludeStepsStepsOneOf1TypeEnum[keyof typeof FunnelExcludeStepsStepsOneOf1TypeEnum];

/**
 * 
 * @export
 * @interface FunnelFrequencyChartType
 */
export interface FunnelFrequencyChartType {
    /**
     * 
     * @type {string}
     * @memberof FunnelFrequencyChartType
     */
    'type': FunnelFrequencyChartTypeTypeEnum;
}

export const FunnelFrequencyChartTypeTypeEnum = {
    Frequency: 'frequency'
} as const;

export type FunnelFrequencyChartTypeTypeEnum = typeof FunnelFrequencyChartTypeTypeEnum[keyof typeof FunnelFrequencyChartTypeTypeEnum];

/**
 * 
 * @export
 * @interface FunnelQuery
 */
export interface FunnelQuery {
    /**
     * 
     * @type {EventRecordsListRequestTime}
     * @memberof FunnelQuery
     */
    'time': EventRecordsListRequestTime;
    /**
     * group that is used in aggregations by group. For instance, group by user or group by organizartion.
     * @type {string}
     * @memberof FunnelQuery
     */
    'group': string;
    /**
     * 
     * @type {Array<FunnelQueryStepsInner>}
     * @memberof FunnelQuery
     */
    'steps': Array<FunnelQueryStepsInner>;
    /**
     * 
     * @type {FunnelQueryTimeWindow}
     * @memberof FunnelQuery
     */
    'timeWindow': FunnelQueryTimeWindow;
    /**
     * 
     * @type {FunnelQueryChartType}
     * @memberof FunnelQuery
     */
    'chartType': FunnelQueryChartType;
    /**
     * 
     * @type {string}
     * @memberof FunnelQuery
     */
    'count': FunnelQueryCountEnum;
    /**
     * 
     * @type {string}
     * @memberof FunnelQuery
     */
    'stepOrder': FunnelQueryStepOrderEnum;
    /**
     * 
     * @type {FunnelQueryAttribution}
     * @memberof FunnelQuery
     */
    'attribution'?: FunnelQueryAttribution;
    /**
     * 
     * @type {Array<PropertyRef>}
     * @memberof FunnelQuery
     */
    'holdingConstants'?: Array<PropertyRef>;
    /**
     * 
     * @type {Array<FunnelQueryExcludeInner>}
     * @memberof FunnelQuery
     */
    'exclude'?: Array<FunnelQueryExcludeInner>;
    /**
     * array of breakdowns
     * @type {Array<BreakdownByProperty>}
     * @memberof FunnelQuery
     */
    'breakdowns'?: Array<BreakdownByProperty>;
    /**
     * array of segments
     * @type {Array<EventSegmentationSegment>}
     * @memberof FunnelQuery
     */
    'segments'?: Array<EventSegmentationSegment>;
    /**
     * 
     * @type {EventGroupedFilters}
     * @memberof FunnelQuery
     */
    'filters'?: EventGroupedFilters;
}

export const FunnelQueryCountEnum = {
    Uniques: 'uniques',
    Totals: 'totals'
} as const;

export type FunnelQueryCountEnum = typeof FunnelQueryCountEnum[keyof typeof FunnelQueryCountEnum];
export const FunnelQueryStepOrderEnum = {
    Any: 'any',
    ExactSequence: 'exactSequence',
    ExactOrder: 'exactOrder'
} as const;

export type FunnelQueryStepOrderEnum = typeof FunnelQueryStepOrderEnum[keyof typeof FunnelQueryStepOrderEnum];

/**
 * @type FunnelQueryAttribution
 * @export
 */
export type FunnelQueryAttribution = FunnelQueryAttributionOneOf | FunnelQueryAttributionOneOf1;

/**
 * 
 * @export
 * @interface FunnelQueryAttributionOneOf
 */
export interface FunnelQueryAttributionOneOf {
    /**
     * 
     * @type {string}
     * @memberof FunnelQueryAttributionOneOf
     */
    'type': FunnelQueryAttributionOneOfTypeEnum;
}

export const FunnelQueryAttributionOneOfTypeEnum = {
    FirstTouch: 'firstTouch',
    LastTouch: 'lastTouch'
} as const;

export type FunnelQueryAttributionOneOfTypeEnum = typeof FunnelQueryAttributionOneOfTypeEnum[keyof typeof FunnelQueryAttributionOneOfTypeEnum];

/**
 * 
 * @export
 * @interface FunnelQueryAttributionOneOf1
 */
export interface FunnelQueryAttributionOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof FunnelQueryAttributionOneOf1
     */
    'type': FunnelQueryAttributionOneOf1TypeEnum;
    /**
     * 
     * @type {number}
     * @memberof FunnelQueryAttributionOneOf1
     */
    'step': number;
}

export const FunnelQueryAttributionOneOf1TypeEnum = {
    Step: 'step'
} as const;

export type FunnelQueryAttributionOneOf1TypeEnum = typeof FunnelQueryAttributionOneOf1TypeEnum[keyof typeof FunnelQueryAttributionOneOf1TypeEnum];

/**
 * 
 * @export
 * @interface FunnelQueryChartType
 */
export interface FunnelQueryChartType {
    /**
     * 
     * @type {string}
     * @memberof FunnelQueryChartType
     */
    'type': FunnelQueryChartTypeTypeEnum;
    /**
     * 
     * @type {TimeUnit}
     * @memberof FunnelQueryChartType
     */
    'intervalUnit': TimeUnit;
    /**
     * 
     * @type {number}
     * @memberof FunnelQueryChartType
     */
    'minInterval'?: number;
    /**
     * 
     * @type {number}
     * @memberof FunnelQueryChartType
     */
    'maxInterval'?: number;
}

export const FunnelQueryChartTypeTypeEnum = {
    Frequency: 'frequency'
} as const;

export type FunnelQueryChartTypeTypeEnum = typeof FunnelQueryChartTypeTypeEnum[keyof typeof FunnelQueryChartTypeTypeEnum];

/**
 * 
 * @export
 * @interface FunnelQueryExcludeInner
 */
export interface FunnelQueryExcludeInner {
    /**
     * 
     * @type {string}
     * @memberof FunnelQueryExcludeInner
     */
    'eventName'?: string;
    /**
     * 
     * @type {number}
     * @memberof FunnelQueryExcludeInner
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventType}
     * @memberof FunnelQueryExcludeInner
     */
    'eventType': EventType;
    /**
     * array of event filters
     * @type {Array<EventFilterByProperty>}
     * @memberof FunnelQueryExcludeInner
     */
    'filters': Array<EventFilterByProperty>;
    /**
     * 
     * @type {FunnelExcludeStepsSteps}
     * @memberof FunnelQueryExcludeInner
     */
    'steps': FunnelExcludeStepsSteps;
}
/**
 * 
 * @export
 * @interface FunnelQueryStepsInner
 */
export interface FunnelQueryStepsInner {
    /**
     * 
     * @type {Array<FunnelEvent>}
     * @memberof FunnelQueryStepsInner
     */
    'events': Array<FunnelEvent>;
    /**
     * 
     * @type {string}
     * @memberof FunnelQueryStepsInner
     */
    'order'?: FunnelQueryStepsInnerOrderEnum;
}

export const FunnelQueryStepsInnerOrderEnum = {
    Any: 'any',
    Exact: 'exact'
} as const;

export type FunnelQueryStepsInnerOrderEnum = typeof FunnelQueryStepsInnerOrderEnum[keyof typeof FunnelQueryStepsInnerOrderEnum];

/**
 * 
 * @export
 * @interface FunnelQueryTimeWindow
 */
export interface FunnelQueryTimeWindow {
    /**
     * N days/weeks
     * @type {number}
     * @memberof FunnelQueryTimeWindow
     */
    'n': number;
    /**
     * 
     * @type {TimeUnitWithSession}
     * @memberof FunnelQueryTimeWindow
     */
    'unit': TimeUnitWithSession;
    /**
     * 
     * @type {string}
     * @memberof FunnelQueryTimeWindow
     */
    'from'?: FunnelQueryTimeWindowFromEnum;
}

export const FunnelQueryTimeWindowFromEnum = {
    AnyDay: 'anyDay',
    FirstDay: 'firstDay'
} as const;

export type FunnelQueryTimeWindowFromEnum = typeof FunnelQueryTimeWindowFromEnum[keyof typeof FunnelQueryTimeWindowFromEnum];

/**
 * 
 * @export
 * @interface FunnelTimeToConvertChartType
 */
export interface FunnelTimeToConvertChartType {
    /**
     * 
     * @type {string}
     * @memberof FunnelTimeToConvertChartType
     */
    'type': FunnelTimeToConvertChartTypeTypeEnum;
    /**
     * 
     * @type {TimeUnit}
     * @memberof FunnelTimeToConvertChartType
     */
    'intervalUnit': TimeUnit;
    /**
     * 
     * @type {number}
     * @memberof FunnelTimeToConvertChartType
     */
    'minInterval'?: number;
    /**
     * 
     * @type {number}
     * @memberof FunnelTimeToConvertChartType
     */
    'maxInterval'?: number;
}

export const FunnelTimeToConvertChartTypeTypeEnum = {
    TimeToConvert: 'timeToConvert'
} as const;

export type FunnelTimeToConvertChartTypeTypeEnum = typeof FunnelTimeToConvertChartTypeTypeEnum[keyof typeof FunnelTimeToConvertChartTypeTypeEnum];

/**
 * 
 * @export
 * @interface GroupRecord
 */
export interface GroupRecord {
    /**
     * 
     * @type {number}
     * @memberof GroupRecord
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GroupRecord
     */
    'strId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRecord
     */
    'group': string;
    /**
     * map of group property name and property value pairs
     * @type {{ [key: string]: Value; }}
     * @memberof GroupRecord
     */
    'properties': { [key: string]: Value; };
}
/**
 * 
 * @export
 * @interface GroupRecordsList200Response
 */
export interface GroupRecordsList200Response {
    /**
     * 
     * @type {Array<GroupRecord>}
     * @memberof GroupRecordsList200Response
     */
    'data'?: Array<GroupRecord>;
    /**
     * 
     * @type {ListResponseMetadataMeta}
     * @memberof GroupRecordsList200Response
     */
    'meta'?: ListResponseMetadataMeta;
}
/**
 * request group records sorted by time of creation
 * @export
 * @interface GroupRecordsListRequest
 */
export interface GroupRecordsListRequest {
    /**
     * 
     * @type {EventRecordsListRequestTime}
     * @memberof GroupRecordsListRequest
     */
    'time': EventRecordsListRequestTime;
    /**
     * group that is used in aggregations by group. For instance, group by user or group by organization.
     * @type {string}
     * @memberof GroupRecordsListRequest
     */
    'group': string;
    /**
     * 
     * @type {string}
     * @memberof GroupRecordsListRequest
     */
    'searchTerm'?: string;
    /**
     * array of segments
     * @type {Array<EventSegmentationSegment>}
     * @memberof GroupRecordsListRequest
     */
    'segments'?: Array<EventSegmentationSegment>;
    /**
     * 
     * @type {EventGroupedFilters}
     * @memberof GroupRecordsListRequest
     */
    'filters'?: EventGroupedFilters;
}
/**
 * see https://datatracker.ietf.org/doc/html/rfc7519
 * @export
 * @interface JWTToken
 */
export interface JWTToken {
    /**
     * 
     * @type {number}
     * @memberof JWTToken
     */
    'accountId': number;
    /**
     * 
     * @type {string}
     * @memberof JWTToken
     */
    'iss': JWTTokenIssEnum;
    /**
     * 
     * @type {number}
     * @memberof JWTToken
     */
    'exp': number;
    /**
     * 
     * @type {number}
     * @memberof JWTToken
     */
    'nbf': number;
    /**
     * 
     * @type {number}
     * @memberof JWTToken
     */
    'iat': number;
    /**
     * 
     * @type {number}
     * @memberof JWTToken
     */
    'jti': number;
}

export const JWTTokenIssEnum = {
    Optiprism: 'optiprism'
} as const;

export type JWTTokenIssEnum = typeof JWTTokenIssEnum[keyof typeof JWTTokenIssEnum];

/**
 * 
 * @export
 * @interface ListCustomPropertiesResponse
 */
export interface ListCustomPropertiesResponse {
    /**
     * 
     * @type {Array<CustomProperty>}
     * @memberof ListCustomPropertiesResponse
     */
    'events'?: Array<CustomProperty>;
}
/**
 * 
 * @export
 * @interface ListEventRecordsResponse
 */
export interface ListEventRecordsResponse {
    /**
     * 
     * @type {Array<EventRecord>}
     * @memberof ListEventRecordsResponse
     */
    'events'?: Array<EventRecord>;
}
/**
 * 
 * @export
 * @interface ListGroupRecordsResponse
 */
export interface ListGroupRecordsResponse {
    /**
     * 
     * @type {Array<GroupRecord>}
     * @memberof ListGroupRecordsResponse
     */
    'data'?: Array<GroupRecord>;
}
/**
 * 
 * @export
 * @interface ListPropertiesResponse
 */
export interface ListPropertiesResponse {
    /**
     * 
     * @type {Array<Property>}
     * @memberof ListPropertiesResponse
     */
    'data'?: Array<Property>;
}
/**
 * 
 * @export
 * @interface ListPropertyValuesRequest
 */
export interface ListPropertyValuesRequest {
    /**
     * 
     * @type {string}
     * @memberof ListPropertyValuesRequest
     */
    'propertyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListPropertyValuesRequest
     */
    'propertyId'?: number;
    /**
     * 
     * @type {PropertyType}
     * @memberof ListPropertyValuesRequest
     */
    'propertyType': PropertyType;
    /**
     * 
     * @type {string}
     * @memberof ListPropertyValuesRequest
     */
    'eventName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListPropertyValuesRequest
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventType}
     * @memberof ListPropertyValuesRequest
     */
    'eventType': EventType;
    /**
     * 
     * @type {PropertyValuesRequestFilter}
     * @memberof ListPropertyValuesRequest
     */
    'filter'?: PropertyValuesRequestFilter;
}
/**
 * 
 * @export
 * @interface ListPropertyValuesRequestAllOf
 */
export interface ListPropertyValuesRequestAllOf {
    /**
     * 
     * @type {PropertyValuesRequestFilter}
     * @memberof ListPropertyValuesRequestAllOf
     */
    'filter'?: PropertyValuesRequestFilter;
}
/**
 * 
 * @export
 * @interface ListPropertyValuesResponse
 */
export interface ListPropertyValuesResponse {
    /**
     * 
     * @type {Array<Value>}
     * @memberof ListPropertyValuesResponse
     */
    'data'?: Array<Value>;
}
/**
 * list response metadata
 * @export
 * @interface ListResponseMetadata
 */
export interface ListResponseMetadata {
    /**
     * 
     * @type {ListResponseMetadataMeta}
     * @memberof ListResponseMetadata
     */
    'meta'?: ListResponseMetadataMeta;
}
/**
 * 
 * @export
 * @interface ListResponseMetadataMeta
 */
export interface ListResponseMetadataMeta {
    /**
     * 
     * @type {string}
     * @memberof ListResponseMetadataMeta
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListResponseMetadataMeta
     */
    'prev'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListResponseMetadataMeta
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {Array<number>}
     * @memberof Organization
     */
    'teams'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof Organization
     */
    'users'?: Array<number>;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'createdBy'?: number;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'updatedBy'?: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'sessionTimeoutSeconds'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof Project
     */
    'teams'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof Project
     */
    'users'?: Array<number>;
}
/**
 * Property defines event or user property. For example, event \"Buy product\" may contains next properties like \"Product name\" and \"Price.\" 
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * property unique id
     * @type {number}
     * @memberof Property
     */
    'id': number;
    /**
     * create date
     * @type {string}
     * @memberof Property
     */
    'createdAt'?: string;
    /**
     * update (once updated)
     * @type {string}
     * @memberof Property
     */
    'updatedAt'?: string;
    /**
     * id of creator User
     * @type {number}
     * @memberof Property
     */
    'createdBy'?: number;
    /**
     * id of updater User
     * @type {number}
     * @memberof Property
     */
    'updatedBy'?: number;
    /**
     * project id
     * @type {number}
     * @memberof Property
     */
    'projectId': number;
    /**
     * list of id of events which use this property
     * @type {Array<number>}
     * @memberof Property
     */
    'events'?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Property
     */
    'tags'?: Array<string>;
    /**
     * property name. Must be unique
     * @type {string}
     * @memberof Property
     */
    'name': string;
    /**
     * property name to display. If empty then name is used.
     * @type {string}
     * @memberof Property
     */
    'displayName'?: string;
    /**
     * description
     * @type {string}
     * @memberof Property
     */
    'description'?: string;
    /**
     * 
     * @type {DataType}
     * @memberof Property
     */
    'dataType': DataType;
    /**
     * 
     * @type {PropertyStatus}
     * @memberof Property
     */
    'status': PropertyStatus;
    /**
     * the property is a system-wide, shown in any project and can\'t be modified by a regular user
     * @type {boolean}
     * @memberof Property
     */
    'isSystem': boolean;
    /**
     * nullable property might contains null value
     * @type {boolean}
     * @memberof Property
     */
    'nullable': boolean;
    /**
     * array property might contents multiple values
     * @type {boolean}
     * @memberof Property
     */
    'isArray': boolean;
    /**
     * dictionary can efficiently packs strings provided that cardinality will be relatively log (16bits is a reasonable maximum)
     * @type {boolean}
     * @memberof Property
     */
    'isDictionary': boolean;
    /**
     * 
     * @type {DictionaryDataType}
     * @memberof Property
     */
    'dictionaryType'?: DictionaryDataType;
}
/**
 * operation
 * @export
 * @enum {string}
 */

export const PropertyFilterOperation = {
    Eq: 'eq',
    Neq: 'neq',
    Gt: 'gt',
    Gte: 'gte',
    Lt: 'lt',
    Lte: 'lte',
    True: 'true',
    False: 'false',
    Exists: 'exists',
    Empty: 'empty',
    ArrAll: 'arrAll',
    ArrAny: 'arrAny',
    ArrNone: 'arrNone',
    Regex: 'regex'
} as const;

export type PropertyFilterOperation = typeof PropertyFilterOperation[keyof typeof PropertyFilterOperation];


/**
 * reference to a property by id or name, depends on property type
 * @export
 * @interface PropertyRef
 */
export interface PropertyRef {
    /**
     * 
     * @type {string}
     * @memberof PropertyRef
     */
    'propertyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof PropertyRef
     */
    'propertyId'?: number;
    /**
     * 
     * @type {PropertyType}
     * @memberof PropertyRef
     */
    'propertyType': PropertyType;
}
/**
 * property status
 * @export
 * @enum {string}
 */

export const PropertyStatus = {
    Enabled: 'enabled',
    Disabled: 'disabled'
} as const;

export type PropertyStatus = typeof PropertyStatus[keyof typeof PropertyStatus];


/**
 * possible property type
 * @export
 * @enum {string}
 */

export const PropertyType = {
    Event: 'event',
    User: 'user',
    Custom: 'custom'
} as const;

export type PropertyType = typeof PropertyType[keyof typeof PropertyType];


/**
 * 
 * @export
 * @interface PropertyValuesList200Response
 */
export interface PropertyValuesList200Response {
    /**
     * 
     * @type {Array<Value>}
     * @memberof PropertyValuesList200Response
     */
    'data'?: Array<Value>;
    /**
     * 
     * @type {ListResponseMetadataMeta}
     * @memberof PropertyValuesList200Response
     */
    'meta'?: ListResponseMetadataMeta;
}
/**
 * 
 * @export
 * @interface PropertyValuesRequestFilter
 */
export interface PropertyValuesRequestFilter {
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof PropertyValuesRequestFilter
     */
    'operation': PropertyFilterOperation;
    /**
     * 
     * @type {Array<Value>}
     * @memberof PropertyValuesRequestFilter
     */
    'value': Array<Value>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const QueryAggregate = {
    Sum: 'sum',
    Avg: 'avg',
    Median: 'median',
    Count: 'count',
    Min: 'min',
    Max: 'max',
    DistinctCount: 'distinctCount',
    Percentile25: 'percentile25',
    Percentile75: 'percentile75',
    Percentile90: 'percentile90',
    Percentile99: 'percentile99'
} as const;

export type QueryAggregate = typeof QueryAggregate[keyof typeof QueryAggregate];


/**
 * 
 * @export
 * @enum {string}
 */

export const QueryAggregatePerGroup = {
    Sum: 'sum',
    Avg: 'avg',
    Median: 'median',
    Count: 'count',
    Min: 'min',
    Max: 'max',
    DistinctCount: 'distinctCount',
    Percentile25: 'percentile25',
    Percentile75: 'percentile75',
    Percentile90: 'percentile90',
    Percentile99: 'percentile99'
} as const;

export type QueryAggregatePerGroup = typeof QueryAggregatePerGroup[keyof typeof QueryAggregatePerGroup];


/**
 * aggregate of property per by group
 * @export
 * @interface QueryAggregateProperty
 */
export interface QueryAggregateProperty {
    /**
     * 
     * @type {string}
     * @memberof QueryAggregateProperty
     */
    'propertyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof QueryAggregateProperty
     */
    'propertyId'?: number;
    /**
     * 
     * @type {PropertyType}
     * @memberof QueryAggregateProperty
     */
    'propertyType': PropertyType;
    /**
     * 
     * @type {string}
     * @memberof QueryAggregateProperty
     */
    'type': QueryAggregatePropertyTypeEnum;
    /**
     * 
     * @type {QueryAggregate}
     * @memberof QueryAggregateProperty
     */
    'aggregate': QueryAggregate;
}

export const QueryAggregatePropertyTypeEnum = {
    AggregateProperty: 'aggregateProperty'
} as const;

export type QueryAggregatePropertyTypeEnum = typeof QueryAggregatePropertyTypeEnum[keyof typeof QueryAggregatePropertyTypeEnum];

/**
 * 
 * @export
 * @interface QueryAggregatePropertyAllOf
 */
export interface QueryAggregatePropertyAllOf {
    /**
     * 
     * @type {string}
     * @memberof QueryAggregatePropertyAllOf
     */
    'type': QueryAggregatePropertyAllOfTypeEnum;
}

export const QueryAggregatePropertyAllOfTypeEnum = {
    AggregateProperty: 'aggregateProperty'
} as const;

export type QueryAggregatePropertyAllOfTypeEnum = typeof QueryAggregatePropertyAllOfTypeEnum[keyof typeof QueryAggregatePropertyAllOfTypeEnum];

/**
 * 
 * @export
 * @interface QueryAggregatePropertyAllOf1
 */
export interface QueryAggregatePropertyAllOf1 {
    /**
     * 
     * @type {QueryAggregate}
     * @memberof QueryAggregatePropertyAllOf1
     */
    'aggregate': QueryAggregate;
}
/**
 * aggregate of property per by group
 * @export
 * @interface QueryAggregatePropertyPerGroup
 */
export interface QueryAggregatePropertyPerGroup {
    /**
     * 
     * @type {string}
     * @memberof QueryAggregatePropertyPerGroup
     */
    'propertyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof QueryAggregatePropertyPerGroup
     */
    'propertyId'?: number;
    /**
     * 
     * @type {PropertyType}
     * @memberof QueryAggregatePropertyPerGroup
     */
    'propertyType': PropertyType;
    /**
     * 
     * @type {string}
     * @memberof QueryAggregatePropertyPerGroup
     */
    'type': QueryAggregatePropertyPerGroupTypeEnum;
    /**
     * 
     * @type {QueryAggregate}
     * @memberof QueryAggregatePropertyPerGroup
     */
    'aggregate': QueryAggregate;
    /**
     * 
     * @type {QueryAggregatePerGroup}
     * @memberof QueryAggregatePropertyPerGroup
     */
    'aggregatePerGroup': QueryAggregatePerGroup;
}

export const QueryAggregatePropertyPerGroupTypeEnum = {
    AggregatePropertyPerGroup: 'aggregatePropertyPerGroup'
} as const;

export type QueryAggregatePropertyPerGroupTypeEnum = typeof QueryAggregatePropertyPerGroupTypeEnum[keyof typeof QueryAggregatePropertyPerGroupTypeEnum];

/**
 * 
 * @export
 * @interface QueryAggregatePropertyPerGroupAllOf
 */
export interface QueryAggregatePropertyPerGroupAllOf {
    /**
     * 
     * @type {string}
     * @memberof QueryAggregatePropertyPerGroupAllOf
     */
    'type': QueryAggregatePropertyPerGroupAllOfTypeEnum;
}

export const QueryAggregatePropertyPerGroupAllOfTypeEnum = {
    AggregatePropertyPerGroup: 'aggregatePropertyPerGroup'
} as const;

export type QueryAggregatePropertyPerGroupAllOfTypeEnum = typeof QueryAggregatePropertyPerGroupAllOfTypeEnum[keyof typeof QueryAggregatePropertyPerGroupAllOfTypeEnum];

/**
 * 
 * @export
 * @interface QueryAggregatePropertyPerGroupAllOf1
 */
export interface QueryAggregatePropertyPerGroupAllOf1 {
    /**
     * 
     * @type {QueryAggregate}
     * @memberof QueryAggregatePropertyPerGroupAllOf1
     */
    'aggregate': QueryAggregate;
    /**
     * 
     * @type {QueryAggregatePerGroup}
     * @memberof QueryAggregatePropertyPerGroupAllOf1
     */
    'aggregatePerGroup': QueryAggregatePerGroup;
}
/**
 * event count aggregate by group
 * @export
 * @interface QueryCountPerGroup
 */
export interface QueryCountPerGroup {
    /**
     * 
     * @type {string}
     * @memberof QueryCountPerGroup
     */
    'type': QueryCountPerGroupTypeEnum;
    /**
     * 
     * @type {QueryAggregate}
     * @memberof QueryCountPerGroup
     */
    'aggregate': QueryAggregate;
}

export const QueryCountPerGroupTypeEnum = {
    CountPerGroup: 'countPerGroup'
} as const;

export type QueryCountPerGroupTypeEnum = typeof QueryCountPerGroupTypeEnum[keyof typeof QueryCountPerGroupTypeEnum];

/**
 * apply formula
 * @export
 * @interface QueryFormula
 */
export interface QueryFormula {
    /**
     * 
     * @type {string}
     * @memberof QueryFormula
     */
    'type': QueryFormulaTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof QueryFormula
     */
    'formula': string;
}

export const QueryFormulaTypeEnum = {
    Formula: 'formula'
} as const;

export type QueryFormulaTypeEnum = typeof QueryFormulaTypeEnum[keyof typeof QueryFormulaTypeEnum];

/**
 * simple query without any additional arguments
 * @export
 * @interface QuerySimple
 */
export interface QuerySimple {
    /**
     * 
     * @type {string}
     * @memberof QuerySimple
     */
    'type': QuerySimpleTypeEnum;
}

export const QuerySimpleTypeEnum = {
    CountEvents: 'countEvents',
    CountUniqueGroups: 'countUniqueGroups',
    WeeklyActiveGroups: 'weeklyActiveGroups',
    MonthlyActiveGroups: 'monthlyActiveGroups'
} as const;

export type QuerySimpleTypeEnum = typeof QuerySimpleTypeEnum[keyof typeof QuerySimpleTypeEnum];

/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * report unique id
     * @type {number}
     * @memberof Report
     */
    'id': number;
    /**
     * create date
     * @type {string}
     * @memberof Report
     */
    'createdAt'?: string;
    /**
     * update (once updated)
     * @type {string}
     * @memberof Report
     */
    'updatedAt'?: string;
    /**
     * id of creator User
     * @type {number}
     * @memberof Report
     */
    'createdBy'?: number;
    /**
     * id of updater User
     * @type {number}
     * @memberof Report
     */
    'updatedBy'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Report
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'name': string;
    /**
     * description
     * @type {string}
     * @memberof Report
     */
    'description'?: string;
    /**
     * 
     * @type {ReportType}
     * @memberof Report
     */
    'type': ReportType;
    /**
     * 
     * @type {ReportQuery}
     * @memberof Report
     */
    'query': ReportQuery;
}
/**
 * @type ReportQuery
 * @export
 */
export type ReportQuery = EventSegmentation | FunnelQuery;

/**
 * report type
 * @export
 * @enum {string}
 */

export const ReportType = {
    EventSegmentation: 'eventSegmentation',
    Funnel: 'funnel'
} as const;

export type ReportType = typeof ReportType[keyof typeof ReportType];


/**
 * 
 * @export
 * @interface ReportsList200Response
 */
export interface ReportsList200Response {
    /**
     * 
     * @type {Array<Report>}
     * @memberof ReportsList200Response
     */
    'data'?: Array<Report>;
    /**
     * 
     * @type {ListResponseMetadataMeta}
     * @memberof ReportsList200Response
     */
    'meta'?: ListResponseMetadataMeta;
}
/**
 * 
 * @export
 * @interface ReportsList200ResponseAllOf
 */
export interface ReportsList200ResponseAllOf {
    /**
     * 
     * @type {Array<Report>}
     * @memberof ReportsList200ResponseAllOf
     */
    'data'?: Array<Report>;
}
/**
 * did event condition
 * @export
 * @interface SegmentConditionDidEvent
 */
export interface SegmentConditionDidEvent {
    /**
     * 
     * @type {string}
     * @memberof SegmentConditionDidEvent
     */
    'eventName'?: string;
    /**
     * 
     * @type {number}
     * @memberof SegmentConditionDidEvent
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventType}
     * @memberof SegmentConditionDidEvent
     */
    'eventType': EventType;
    /**
     * 
     * @type {string}
     * @memberof SegmentConditionDidEvent
     */
    'type': SegmentConditionDidEventTypeEnum;
    /**
     * 
     * @type {Array<EventFilterByProperty>}
     * @memberof SegmentConditionDidEvent
     */
    'filters'?: Array<EventFilterByProperty>;
    /**
     * 
     * @type {DidEventCount | DidEventRelativeCount | DidEventAggregateProperty | DidEventHistoricalCount}
     * @memberof SegmentConditionDidEvent
     */
    'aggregate': DidEventCount | DidEventRelativeCount | DidEventAggregateProperty | DidEventHistoricalCount;
}

export const SegmentConditionDidEventTypeEnum = {
    DidEvent: 'didEvent'
} as const;

export type SegmentConditionDidEventTypeEnum = typeof SegmentConditionDidEventTypeEnum[keyof typeof SegmentConditionDidEventTypeEnum];

/**
 * 
 * @export
 * @interface SegmentConditionDidEventAllOf
 */
export interface SegmentConditionDidEventAllOf {
    /**
     * 
     * @type {string}
     * @memberof SegmentConditionDidEventAllOf
     */
    'type': SegmentConditionDidEventAllOfTypeEnum;
}

export const SegmentConditionDidEventAllOfTypeEnum = {
    DidEvent: 'didEvent'
} as const;

export type SegmentConditionDidEventAllOfTypeEnum = typeof SegmentConditionDidEventAllOfTypeEnum[keyof typeof SegmentConditionDidEventAllOfTypeEnum];

/**
 * 
 * @export
 * @interface SegmentConditionDidEventAllOf1
 */
export interface SegmentConditionDidEventAllOf1 {
    /**
     * 
     * @type {Array<EventFilterByProperty>}
     * @memberof SegmentConditionDidEventAllOf1
     */
    'filters'?: Array<EventFilterByProperty>;
    /**
     * 
     * @type {DidEventCount | DidEventRelativeCount | DidEventAggregateProperty | DidEventHistoricalCount}
     * @memberof SegmentConditionDidEventAllOf1
     */
    'aggregate': DidEventCount | DidEventRelativeCount | DidEventAggregateProperty | DidEventHistoricalCount;
}
/**
 * 
 * @export
 * @interface SegmentConditionFunnel
 */
export interface SegmentConditionFunnel {
    /**
     * 
     * @type {string}
     * @memberof SegmentConditionFunnel
     */
    'type': SegmentConditionFunnelTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof SegmentConditionFunnel
     */
    'last'?: number;
    /**
     * 
     * @type {TimeUnit}
     * @memberof SegmentConditionFunnel
     */
    'bucket'?: TimeUnit;
}

export const SegmentConditionFunnelTypeEnum = {
    Funnel: 'funnel'
} as const;

export type SegmentConditionFunnelTypeEnum = typeof SegmentConditionFunnelTypeEnum[keyof typeof SegmentConditionFunnelTypeEnum];

/**
 * check whether the user had a property with a value
 * @export
 * @interface SegmentConditionHadPropertyValue
 */
export interface SegmentConditionHadPropertyValue {
    /**
     * 
     * @type {string}
     * @memberof SegmentConditionHadPropertyValue
     */
    'type': SegmentConditionHadPropertyValueTypeEnum;
    /**
     * property name. Because property here is a user only, we don\'t need propertyType
     * @type {string}
     * @memberof SegmentConditionHadPropertyValue
     */
    'propertyName': string;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof SegmentConditionHadPropertyValue
     */
    'operation': PropertyFilterOperation;
    /**
     * one or more values. Doesn\'t need if operation is \"empty\" or \"exist\"
     * @type {Array<Value>}
     * @memberof SegmentConditionHadPropertyValue
     */
    'value'?: Array<Value>;
    /**
     * 
     * @type {SegmentConditionHadPropertyValueTime}
     * @memberof SegmentConditionHadPropertyValue
     */
    'time': SegmentConditionHadPropertyValueTime;
}

export const SegmentConditionHadPropertyValueTypeEnum = {
    HadPropertyValue: 'hadPropertyValue'
} as const;

export type SegmentConditionHadPropertyValueTypeEnum = typeof SegmentConditionHadPropertyValueTypeEnum[keyof typeof SegmentConditionHadPropertyValueTypeEnum];

/**
 * @type SegmentConditionHadPropertyValueTime
 * time frame
 * @export
 */
export type SegmentConditionHadPropertyValueTime = TimeBetween | TimeLast | TimeWindowEach;

/**
 * check whether the user currently has a property with a value
 * @export
 * @interface SegmentConditionHasPropertyValue
 */
export interface SegmentConditionHasPropertyValue {
    /**
     * 
     * @type {string}
     * @memberof SegmentConditionHasPropertyValue
     */
    'type': SegmentConditionHasPropertyValueTypeEnum;
    /**
     * property name. Because property here is a user only, we don\'t need propertyType
     * @type {string}
     * @memberof SegmentConditionHasPropertyValue
     */
    'propertyName': string;
    /**
     * 
     * @type {PropertyFilterOperation}
     * @memberof SegmentConditionHasPropertyValue
     */
    'operation': PropertyFilterOperation;
    /**
     * one or more values. Doesn\'t need if operation is \"empty\" or \"exist\"
     * @type {Array<Value>}
     * @memberof SegmentConditionHasPropertyValue
     */
    'value'?: Array<Value>;
}

export const SegmentConditionHasPropertyValueTypeEnum = {
    HasPropertyValue: 'hasPropertyValue'
} as const;

export type SegmentConditionHasPropertyValueTypeEnum = typeof SegmentConditionHasPropertyValueTypeEnum[keyof typeof SegmentConditionHasPropertyValueTypeEnum];

/**
 * 
 * @export
 * @interface SignupRequest
 */
export interface SignupRequest {
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'passwordRepeat': string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'lastName'?: string;
}
/**
 * time spent after the first use of event. Use in segmentation
 * @export
 * @interface TimeAfterFirstUse
 */
export interface TimeAfterFirstUse {
    /**
     * 
     * @type {string}
     * @memberof TimeAfterFirstUse
     */
    'type': TimeAfterFirstUseTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof TimeAfterFirstUse
     */
    'within': number;
    /**
     * 
     * @type {TimeUnit}
     * @memberof TimeAfterFirstUse
     */
    'unit': TimeUnit;
}

export const TimeAfterFirstUseTypeEnum = {
    AfterFirstUse: 'afterFirstUse'
} as const;

export type TimeAfterFirstUseTypeEnum = typeof TimeAfterFirstUseTypeEnum[keyof typeof TimeAfterFirstUseTypeEnum];

/**
 * time range between fixed values
 * @export
 * @interface TimeBetween
 */
export interface TimeBetween {
    /**
     * 
     * @type {string}
     * @memberof TimeBetween
     */
    'type': TimeBetweenTypeEnum;
    /**
     * start date
     * @type {string}
     * @memberof TimeBetween
     */
    'from': string;
    /**
     * end date
     * @type {string}
     * @memberof TimeBetween
     */
    'to': string;
}

export const TimeBetweenTypeEnum = {
    Between: 'between'
} as const;

export type TimeBetweenTypeEnum = typeof TimeBetweenTypeEnum[keyof typeof TimeBetweenTypeEnum];

/**
 * time range between fixed value and current time
 * @export
 * @interface TimeFrom
 */
export interface TimeFrom {
    /**
     * 
     * @type {string}
     * @memberof TimeFrom
     */
    'type': TimeFromTypeEnum;
    /**
     * start date
     * @type {string}
     * @memberof TimeFrom
     */
    'from': string;
}

export const TimeFromTypeEnum = {
    From: 'from'
} as const;

export type TimeFromTypeEnum = typeof TimeFromTypeEnum[keyof typeof TimeFromTypeEnum];

/**
 * take last N days/weeks
 * @export
 * @interface TimeLast
 */
export interface TimeLast {
    /**
     * 
     * @type {string}
     * @memberof TimeLast
     */
    'type': TimeLastTypeEnum;
    /**
     * Last days/weeks
     * @type {number}
     * @memberof TimeLast
     */
    'last': number;
    /**
     * 
     * @type {TimeUnit}
     * @memberof TimeLast
     */
    'unit': TimeUnit;
}

export const TimeLastTypeEnum = {
    Last: 'last'
} as const;

export type TimeLastTypeEnum = typeof TimeLastTypeEnum[keyof typeof TimeLastTypeEnum];

/**
 * time unit
 * @export
 * @enum {string}
 */

export const TimeUnit = {
    Second: 'second',
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Year: 'year'
} as const;

export type TimeUnit = typeof TimeUnit[keyof typeof TimeUnit];


/**
 * time unit with session
 * @export
 * @enum {string}
 */

export const TimeUnitWithSession = {
    Second: 'second',
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Year: 'year',
    Session: 'session'
} as const;

export type TimeUnitWithSession = typeof TimeUnitWithSession[keyof typeof TimeUnitWithSession];


/**
 * window operation for segmentation. Tells that event should be triggered each timeunit (each day, for instance) {   \"time\": {     \"type\": \"windowEach\",     \"unit\":\"day\"   } } 
 * @export
 * @interface TimeWindowEach
 */
export interface TimeWindowEach {
    /**
     * 
     * @type {string}
     * @memberof TimeWindowEach
     */
    'type': TimeWindowEachTypeEnum;
    /**
     * 
     * @type {TimeUnit}
     * @memberof TimeWindowEach
     */
    'unit': TimeUnit;
}

export const TimeWindowEachTypeEnum = {
    WindowEach: 'windowEach'
} as const;

export type TimeWindowEachTypeEnum = typeof TimeWindowEachTypeEnum[keyof typeof TimeWindowEachTypeEnum];

/**
 * 
 * @export
 * @interface TokensResponse
 */
export interface TokensResponse {
    /**
     * 
     * @type {string}
     * @memberof TokensResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokensResponse
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokensResponse
     */
    'csrfToken'?: string;
}
/**
 * Custom Event is an alias to an expression which is used while querying. You can use regular or custom events in expression. You can combine events in expression, you can use filter by properties. 
 * @export
 * @interface UpdateCustomEventRequest
 */
export interface UpdateCustomEventRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomEventRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomEventRequest
     */
    'description'?: string;
    /**
     * 
     * @type {CustomEventStatus}
     * @memberof UpdateCustomEventRequest
     */
    'status'?: CustomEventStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateCustomEventRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {Array<CustomEventEvent>}
     * @memberof UpdateCustomEventRequest
     */
    'events': Array<CustomEventEvent>;
}
/**
 * 
 * @export
 * @interface UpdateDashboardRequest
 */
export interface UpdateDashboardRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateDashboardRequest
     */
    'tags'?: Array<string>;
    /**
     * dashboard name
     * @type {string}
     * @memberof UpdateDashboardRequest
     */
    'name'?: string;
    /**
     * description
     * @type {string}
     * @memberof UpdateDashboardRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<DashboardPanel>}
     * @memberof UpdateDashboardRequest
     */
    'panels'?: Array<DashboardPanel>;
}
/**
 * Update event request
 * @export
 * @interface UpdateEventRequest
 */
export interface UpdateEventRequest {
    /**
     * event name to display. If empty then name property is used.
     * @type {string}
     * @memberof UpdateEventRequest
     */
    'displayName'?: string;
    /**
     * description
     * @type {string}
     * @memberof UpdateEventRequest
     */
    'description'?: string;
    /**
     * 
     * @type {EventStatus}
     * @memberof UpdateEventRequest
     */
    'status'?: EventStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateEventRequest
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateGroupRecordRequest
 */
export interface UpdateGroupRecordRequest {
    /**
     * map of group property name and property value pairs
     * @type {{ [key: string]: Value; }}
     * @memberof UpdateGroupRecordRequest
     */
    'properties': { [key: string]: Value; };
}
/**
 * Propetty update
 * @export
 * @interface UpdatePropertyRequest
 */
export interface UpdatePropertyRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdatePropertyRequest
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePropertyRequest
     */
    'description'?: string;
    /**
     * 
     * @type {PropertyStatus}
     * @memberof UpdatePropertyRequest
     */
    'status'?: PropertyStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdatePropertyRequest
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateReportRequest
 */
export interface UpdateReportRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateReportRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateReportRequest
     */
    'name'?: string;
    /**
     * description
     * @type {string}
     * @memberof UpdateReportRequest
     */
    'description'?: string;
    /**
     * 
     * @type {ReportType}
     * @memberof UpdateReportRequest
     */
    'type'?: ReportType;
    /**
     * 
     * @type {ReportQuery}
     * @memberof UpdateReportRequest
     */
    'query'?: ReportQuery;
}
/**
 * 
 * @export
 * @interface UserPropertiesList200Response
 */
export interface UserPropertiesList200Response {
    /**
     * 
     * @type {Array<Property>}
     * @memberof UserPropertiesList200Response
     */
    'data'?: Array<Property>;
    /**
     * 
     * @type {ListResponseMetadataMeta}
     * @memberof UserPropertiesList200Response
     */
    'meta'?: ListResponseMetadataMeta;
}
/**
 * @type Value
 * value
 * @export
 */
export type Value = boolean | number | string;


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Basic login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basicLogin: async (loginRequest: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('basicLogin', 'loginRequest', loginRequest)
            const localVarPath = `/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Basic signup
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basicSignup: async (signupRequest: SignupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupRequest' is not null or undefined
            assertParamExists('basicSignup', 'signupRequest', signupRequest)
            const localVarPath = `/v1/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh access token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshTokenRequest: RefreshTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('refreshToken', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/v1/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Basic login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async basicLogin(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokensResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.basicLogin(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Basic signup
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async basicSignup(signupRequest: SignupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokensResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.basicSignup(signupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh access token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokensResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Basic login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basicLogin(loginRequest: LoginRequest, options?: any): AxiosPromise<TokensResponse> {
            return localVarFp.basicLogin(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Basic signup
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        basicSignup(signupRequest: SignupRequest, options?: any): AxiosPromise<TokensResponse> {
            return localVarFp.basicSignup(signupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh access token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: any): AxiosPromise<TokensResponse> {
            return localVarFp.refreshToken(refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Basic login
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public basicLogin(loginRequest: LoginRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).basicLogin(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Basic signup
     * @param {SignupRequest} signupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public basicSignup(signupRequest: SignupRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).basicSignup(signupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh access token
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshToken(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomEventsApi - axios parameter creator
 * @export
 */
export const CustomEventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {CreateCustomEventRequest} createCustomEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomEvent: async (organizationId: number, projectId: number, createCustomEventRequest: CreateCustomEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('createCustomEvent', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createCustomEvent', 'projectId', projectId)
            // verify required parameter 'createCustomEventRequest' is not null or undefined
            assertParamExists('createCustomEvent', 'createCustomEventRequest', createCustomEventRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/custom-events`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Custom events list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customEventsList: async (organizationId: number, projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('customEventsList', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('customEventsList', 'projectId', projectId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/custom-events`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} eventId Event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomEvent: async (organizationId: number, projectId: number, eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('deleteCustomEvent', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteCustomEvent', 'projectId', projectId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteCustomEvent', 'eventId', eventId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/custom-events/{eventId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} eventId Event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomEvent: async (organizationId: number, projectId: number, eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getCustomEvent', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getCustomEvent', 'projectId', projectId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getCustomEvent', 'eventId', eventId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/custom-events/{eventId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {string} eventId Custom Event ID
         * @param {UpdateCustomEventRequest} updateCustomEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomEvent: async (organizationId: number, projectId: number, eventId: string, updateCustomEventRequest: UpdateCustomEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateCustomEvent', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateCustomEvent', 'projectId', projectId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('updateCustomEvent', 'eventId', eventId)
            // verify required parameter 'updateCustomEventRequest' is not null or undefined
            assertParamExists('updateCustomEvent', 'updateCustomEventRequest', updateCustomEventRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/custom-events/{eventId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomEventsApi - functional programming interface
 * @export
 */
export const CustomEventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomEventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {CreateCustomEventRequest} createCustomEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomEvent(organizationId: number, projectId: number, createCustomEventRequest: CreateCustomEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomEvent(organizationId, projectId, createCustomEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Custom events list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customEventsList(organizationId: number, projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomEventsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customEventsList(organizationId, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} eventId Event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomEvent(organizationId: number, projectId: number, eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomEvent(organizationId, projectId, eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} eventId Event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomEvent(organizationId: number, projectId: number, eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomEvent(organizationId, projectId, eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {string} eventId Custom Event ID
         * @param {UpdateCustomEventRequest} updateCustomEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomEvent(organizationId: number, projectId: number, eventId: string, updateCustomEventRequest: UpdateCustomEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomEvent(organizationId, projectId, eventId, updateCustomEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomEventsApi - factory interface
 * @export
 */
export const CustomEventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomEventsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {CreateCustomEventRequest} createCustomEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomEvent(organizationId: number, projectId: number, createCustomEventRequest: CreateCustomEventRequest, options?: any): AxiosPromise<CustomEvent> {
            return localVarFp.createCustomEvent(organizationId, projectId, createCustomEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Custom events list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customEventsList(organizationId: number, projectId: number, options?: any): AxiosPromise<CustomEventsList200Response> {
            return localVarFp.customEventsList(organizationId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} eventId Event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomEvent(organizationId: number, projectId: number, eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustomEvent(organizationId, projectId, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} eventId Event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomEvent(organizationId: number, projectId: number, eventId: number, options?: any): AxiosPromise<CustomEvent> {
            return localVarFp.getCustomEvent(organizationId, projectId, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update custom event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {string} eventId Custom Event ID
         * @param {UpdateCustomEventRequest} updateCustomEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomEvent(organizationId: number, projectId: number, eventId: string, updateCustomEventRequest: UpdateCustomEventRequest, options?: any): AxiosPromise<CustomEvent> {
            return localVarFp.updateCustomEvent(organizationId, projectId, eventId, updateCustomEventRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomEventsApi - object-oriented interface
 * @export
 * @class CustomEventsApi
 * @extends {BaseAPI}
 */
export class CustomEventsApi extends BaseAPI {
    /**
     * 
     * @summary Create custom event
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {CreateCustomEventRequest} createCustomEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public createCustomEvent(organizationId: number, projectId: number, createCustomEventRequest: CreateCustomEventRequest, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).createCustomEvent(organizationId, projectId, createCustomEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Custom events list
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public customEventsList(organizationId: number, projectId: number, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).customEventsList(organizationId, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete custom event
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} eventId Event ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public deleteCustomEvent(organizationId: number, projectId: number, eventId: number, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).deleteCustomEvent(organizationId, projectId, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get custom event
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} eventId Event ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public getCustomEvent(organizationId: number, projectId: number, eventId: number, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).getCustomEvent(organizationId, projectId, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update custom event
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {string} eventId Custom Event ID
     * @param {UpdateCustomEventRequest} updateCustomEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomEventsApi
     */
    public updateCustomEvent(organizationId: number, projectId: number, eventId: string, updateCustomEventRequest: UpdateCustomEventRequest, options?: AxiosRequestConfig) {
        return CustomEventsApiFp(this.configuration).updateCustomEvent(organizationId, projectId, eventId, updateCustomEventRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DashboardsApi - axios parameter creator
 * @export
 */
export const DashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {CreateDashboardRequest} createDashboardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboard: async (organizationId: number, projectId: number, createDashboardRequest: CreateDashboardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('createDashboard', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createDashboard', 'projectId', projectId)
            // verify required parameter 'createDashboardRequest' is not null or undefined
            assertParamExists('createDashboard', 'createDashboardRequest', createDashboardRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/dashboards`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDashboardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dashboards list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardsList: async (organizationId: number, projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('dashboardsList', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('dashboardsList', 'projectId', projectId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/dashboards`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} dashboardId Dashboard ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboard: async (organizationId: number, projectId: number, dashboardId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('deleteDashboard', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteDashboard', 'projectId', projectId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('deleteDashboard', 'dashboardId', dashboardId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/dashboards/{dashboardId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"dashboardId"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} dashboardId Dashboard ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboard: async (organizationId: number, projectId: number, dashboardId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getDashboard', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getDashboard', 'projectId', projectId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('getDashboard', 'dashboardId', dashboardId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/dashboards/{dashboardId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"dashboardId"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} dashboardId Dashboard ID
         * @param {UpdateDashboardRequest} updateDashboardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDashboard: async (organizationId: number, projectId: number, dashboardId: number, updateDashboardRequest: UpdateDashboardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateDashboard', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateDashboard', 'projectId', projectId)
            // verify required parameter 'dashboardId' is not null or undefined
            assertParamExists('updateDashboard', 'dashboardId', dashboardId)
            // verify required parameter 'updateDashboardRequest' is not null or undefined
            assertParamExists('updateDashboard', 'updateDashboardRequest', updateDashboardRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/dashboards/{dashboardId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"dashboardId"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDashboardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardsApi - functional programming interface
 * @export
 */
export const DashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {CreateDashboardRequest} createDashboardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDashboard(organizationId: number, projectId: number, createDashboardRequest: CreateDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDashboard(organizationId, projectId, createDashboardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dashboards list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardsList(organizationId: number, projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardsList(organizationId, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} dashboardId Dashboard ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDashboard(organizationId: number, projectId: number, dashboardId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDashboard(organizationId, projectId, dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} dashboardId Dashboard ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboard(organizationId: number, projectId: number, dashboardId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboard(organizationId, projectId, dashboardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} dashboardId Dashboard ID
         * @param {UpdateDashboardRequest} updateDashboardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDashboard(organizationId: number, projectId: number, dashboardId: number, updateDashboardRequest: UpdateDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDashboard(organizationId, projectId, dashboardId, updateDashboardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardsApi - factory interface
 * @export
 */
export const DashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {CreateDashboardRequest} createDashboardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboard(organizationId: number, projectId: number, createDashboardRequest: CreateDashboardRequest, options?: any): AxiosPromise<Dashboard> {
            return localVarFp.createDashboard(organizationId, projectId, createDashboardRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dashboards list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardsList(organizationId: number, projectId: number, options?: any): AxiosPromise<DashboardsList200Response> {
            return localVarFp.dashboardsList(organizationId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} dashboardId Dashboard ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboard(organizationId: number, projectId: number, dashboardId: number, options?: any): AxiosPromise<Dashboard> {
            return localVarFp.deleteDashboard(organizationId, projectId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} dashboardId Dashboard ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboard(organizationId: number, projectId: number, dashboardId: number, options?: any): AxiosPromise<Dashboard> {
            return localVarFp.getDashboard(organizationId, projectId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update dashboard
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} dashboardId Dashboard ID
         * @param {UpdateDashboardRequest} updateDashboardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDashboard(organizationId: number, projectId: number, dashboardId: number, updateDashboardRequest: UpdateDashboardRequest, options?: any): AxiosPromise<Dashboard> {
            return localVarFp.updateDashboard(organizationId, projectId, dashboardId, updateDashboardRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
export class DashboardsApi extends BaseAPI {
    /**
     * 
     * @summary Create dashboard
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {CreateDashboardRequest} createDashboardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public createDashboard(organizationId: number, projectId: number, createDashboardRequest: CreateDashboardRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).createDashboard(organizationId, projectId, createDashboardRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dashboards list
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public dashboardsList(organizationId: number, projectId: number, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).dashboardsList(organizationId, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete dashboard
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} dashboardId Dashboard ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public deleteDashboard(organizationId: number, projectId: number, dashboardId: number, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).deleteDashboard(organizationId, projectId, dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get dashboard
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} dashboardId Dashboard ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public getDashboard(organizationId: number, projectId: number, dashboardId: number, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).getDashboard(organizationId, projectId, dashboardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update dashboard
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} dashboardId Dashboard ID
     * @param {UpdateDashboardRequest} updateDashboardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    public updateDashboard(organizationId: number, projectId: number, dashboardId: number, updateDashboardRequest: UpdateDashboardRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).updateDashboard(organizationId, projectId, dashboardId, updateDashboardRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventPropertiesApi - axios parameter creator
 * @export
 */
export const EventPropertiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Event properties list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventPropertiesList: async (organizationId: number, projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('eventPropertiesList', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('eventPropertiesList', 'projectId', projectId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/event-properties`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} propertyId Property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventProperty: async (organizationId: number, projectId: number, propertyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getEventProperty', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getEventProperty', 'projectId', projectId)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('getEventProperty', 'propertyId', propertyId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/event-properties/{propertyId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update event property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {string} propertyId Property ID
         * @param {UpdatePropertyRequest} updatePropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventProperty: async (organizationId: number, projectId: number, propertyId: string, updatePropertyRequest: UpdatePropertyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateEventProperty', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateEventProperty', 'projectId', projectId)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('updateEventProperty', 'propertyId', propertyId)
            // verify required parameter 'updatePropertyRequest' is not null or undefined
            assertParamExists('updateEventProperty', 'updatePropertyRequest', updatePropertyRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/event-properties/{propertyId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePropertyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventPropertiesApi - functional programming interface
 * @export
 */
export const EventPropertiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventPropertiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Event properties list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventPropertiesList(organizationId: number, projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPropertiesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventPropertiesList(organizationId, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get event property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} propertyId Property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventProperty(organizationId: number, projectId: number, propertyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventProperty(organizationId, projectId, propertyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update event property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {string} propertyId Property ID
         * @param {UpdatePropertyRequest} updatePropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventProperty(organizationId: number, projectId: number, propertyId: string, updatePropertyRequest: UpdatePropertyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventProperty(organizationId, projectId, propertyId, updatePropertyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventPropertiesApi - factory interface
 * @export
 */
export const EventPropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventPropertiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Event properties list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventPropertiesList(organizationId: number, projectId: number, options?: any): AxiosPromise<UserPropertiesList200Response> {
            return localVarFp.eventPropertiesList(organizationId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} propertyId Property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventProperty(organizationId: number, projectId: number, propertyId: number, options?: any): AxiosPromise<Property> {
            return localVarFp.getEventProperty(organizationId, projectId, propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update event property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {string} propertyId Property ID
         * @param {UpdatePropertyRequest} updatePropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventProperty(organizationId: number, projectId: number, propertyId: string, updatePropertyRequest: UpdatePropertyRequest, options?: any): AxiosPromise<Property> {
            return localVarFp.updateEventProperty(organizationId, projectId, propertyId, updatePropertyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventPropertiesApi - object-oriented interface
 * @export
 * @class EventPropertiesApi
 * @extends {BaseAPI}
 */
export class EventPropertiesApi extends BaseAPI {
    /**
     * 
     * @summary Event properties list
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventPropertiesApi
     */
    public eventPropertiesList(organizationId: number, projectId: number, options?: AxiosRequestConfig) {
        return EventPropertiesApiFp(this.configuration).eventPropertiesList(organizationId, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event property
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} propertyId Property ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventPropertiesApi
     */
    public getEventProperty(organizationId: number, projectId: number, propertyId: number, options?: AxiosRequestConfig) {
        return EventPropertiesApiFp(this.configuration).getEventProperty(organizationId, projectId, propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update event property
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {string} propertyId Property ID
     * @param {UpdatePropertyRequest} updatePropertyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventPropertiesApi
     */
    public updateEventProperty(organizationId: number, projectId: number, propertyId: string, updatePropertyRequest: UpdatePropertyRequest, options?: AxiosRequestConfig) {
        return EventPropertiesApiFp(this.configuration).updateEventProperty(organizationId, projectId, propertyId, updatePropertyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventRecordsApi - axios parameter creator
 * @export
 */
export const EventRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get event records
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {EventRecordsListRequest} eventRecordsListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventRecordsList: async (organizationId: number, projectId: number, eventRecordsListRequest: EventRecordsListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('eventRecordsList', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('eventRecordsList', 'projectId', projectId)
            // verify required parameter 'eventRecordsListRequest' is not null or undefined
            assertParamExists('eventRecordsList', 'eventRecordsListRequest', eventRecordsListRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/event-records/search`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventRecordsListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event record
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} id Event Record ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRecord: async (organizationId: number, projectId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getEventRecord', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getEventRecord', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEventRecord', 'id', id)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/event-records/{id}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventRecordsApi - functional programming interface
 * @export
 */
export const EventRecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventRecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get event records
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {EventRecordsListRequest} eventRecordsListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventRecordsList(organizationId: number, projectId: number, eventRecordsListRequest: EventRecordsListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventRecordsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventRecordsList(organizationId, projectId, eventRecordsListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get event record
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} id Event Record ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventRecord(organizationId: number, projectId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventRecord(organizationId, projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventRecordsApi - factory interface
 * @export
 */
export const EventRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventRecordsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get event records
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {EventRecordsListRequest} eventRecordsListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventRecordsList(organizationId: number, projectId: number, eventRecordsListRequest: EventRecordsListRequest, options?: any): AxiosPromise<EventRecordsList200Response> {
            return localVarFp.eventRecordsList(organizationId, projectId, eventRecordsListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event record
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} id Event Record ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRecord(organizationId: number, projectId: number, id: number, options?: any): AxiosPromise<EventRecord> {
            return localVarFp.getEventRecord(organizationId, projectId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventRecordsApi - object-oriented interface
 * @export
 * @class EventRecordsApi
 * @extends {BaseAPI}
 */
export class EventRecordsApi extends BaseAPI {
    /**
     * 
     * @summary Get event records
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {EventRecordsListRequest} eventRecordsListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRecordsApi
     */
    public eventRecordsList(organizationId: number, projectId: number, eventRecordsListRequest: EventRecordsListRequest, options?: AxiosRequestConfig) {
        return EventRecordsApiFp(this.configuration).eventRecordsList(organizationId, projectId, eventRecordsListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event record
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} id Event Record ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventRecordsApi
     */
    public getEventRecord(organizationId: number, projectId: number, id: number, options?: AxiosRequestConfig) {
        return EventRecordsApiFp(this.configuration).getEventRecord(organizationId, projectId, id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Events list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsList: async (organizationId: number, projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('eventsList', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('eventsList', 'projectId', projectId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/events`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} eventId Event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent: async (organizationId: number, projectId: number, eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getEvent', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getEvent', 'projectId', projectId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getEvent', 'eventId', eventId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/events/{eventId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {string} eventId Event ID
         * @param {UpdateEventRequest} updateEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent: async (organizationId: number, projectId: number, eventId: string, updateEventRequest: UpdateEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateEvent', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateEvent', 'projectId', projectId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('updateEvent', 'eventId', eventId)
            // verify required parameter 'updateEventRequest' is not null or undefined
            assertParamExists('updateEvent', 'updateEventRequest', updateEventRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/events/{eventId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Events list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsList(organizationId: number, projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsList(organizationId, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} eventId Event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvent(organizationId: number, projectId: number, eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(organizationId, projectId, eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {string} eventId Event ID
         * @param {UpdateEventRequest} updateEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEvent(organizationId: number, projectId: number, eventId: string, updateEventRequest: UpdateEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEvent(organizationId, projectId, eventId, updateEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * 
         * @summary Events list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsList(organizationId: number, projectId: number, options?: any): AxiosPromise<EventsList200Response> {
            return localVarFp.eventsList(organizationId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} eventId Event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent(organizationId: number, projectId: number, eventId: number, options?: any): AxiosPromise<Event> {
            return localVarFp.getEvent(organizationId, projectId, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update event
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {string} eventId Event ID
         * @param {UpdateEventRequest} updateEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent(organizationId: number, projectId: number, eventId: string, updateEventRequest: UpdateEventRequest, options?: any): AxiosPromise<Event> {
            return localVarFp.updateEvent(organizationId, projectId, eventId, updateEventRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * 
     * @summary Events list
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsList(organizationId: number, projectId: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsList(organizationId, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} eventId Event ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getEvent(organizationId: number, projectId: number, eventId: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).getEvent(organizationId, projectId, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update event
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {string} eventId Event ID
     * @param {UpdateEventRequest} updateEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public updateEvent(organizationId: number, projectId: number, eventId: string, updateEventRequest: UpdateEventRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).updateEvent(organizationId, projectId, eventId, updateEventRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupRecordsApi - axios parameter creator
 * @export
 */
export const GroupRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get group record
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} id Group Record ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupRecord: async (organizationId: number, projectId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getGroupRecord', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getGroupRecord', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroupRecord', 'id', id)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/group-records/{id}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List group records
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {GroupRecordsListRequest} groupRecordsListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupRecordsList: async (organizationId: number, projectId: number, groupRecordsListRequest: GroupRecordsListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('groupRecordsList', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('groupRecordsList', 'projectId', projectId)
            // verify required parameter 'groupRecordsListRequest' is not null or undefined
            assertParamExists('groupRecordsList', 'groupRecordsListRequest', groupRecordsListRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/group-records/search`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupRecordsListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update group record
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} id Group Record ID
         * @param {UpdateGroupRecordRequest} updateGroupRecordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupRecord: async (organizationId: number, projectId: number, id: number, updateGroupRecordRequest: UpdateGroupRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateGroupRecord', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateGroupRecord', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGroupRecord', 'id', id)
            // verify required parameter 'updateGroupRecordRequest' is not null or undefined
            assertParamExists('updateGroupRecord', 'updateGroupRecordRequest', updateGroupRecordRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/group-records/{id}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupRecordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupRecordsApi - functional programming interface
 * @export
 */
export const GroupRecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupRecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get group record
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} id Group Record ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupRecord(organizationId: number, projectId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupRecord(organizationId, projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List group records
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {GroupRecordsListRequest} groupRecordsListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupRecordsList(organizationId: number, projectId: number, groupRecordsListRequest: GroupRecordsListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupRecordsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupRecordsList(organizationId, projectId, groupRecordsListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update group record
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} id Group Record ID
         * @param {UpdateGroupRecordRequest} updateGroupRecordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupRecord(organizationId: number, projectId: number, id: number, updateGroupRecordRequest: UpdateGroupRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroupRecord(organizationId, projectId, id, updateGroupRecordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupRecordsApi - factory interface
 * @export
 */
export const GroupRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupRecordsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get group record
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} id Group Record ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupRecord(organizationId: number, projectId: number, id: number, options?: any): AxiosPromise<GroupRecord> {
            return localVarFp.getGroupRecord(organizationId, projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List group records
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {GroupRecordsListRequest} groupRecordsListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupRecordsList(organizationId: number, projectId: number, groupRecordsListRequest: GroupRecordsListRequest, options?: any): AxiosPromise<GroupRecordsList200Response> {
            return localVarFp.groupRecordsList(organizationId, projectId, groupRecordsListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update group record
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} id Group Record ID
         * @param {UpdateGroupRecordRequest} updateGroupRecordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupRecord(organizationId: number, projectId: number, id: number, updateGroupRecordRequest: UpdateGroupRecordRequest, options?: any): AxiosPromise<GroupRecord> {
            return localVarFp.updateGroupRecord(organizationId, projectId, id, updateGroupRecordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupRecordsApi - object-oriented interface
 * @export
 * @class GroupRecordsApi
 * @extends {BaseAPI}
 */
export class GroupRecordsApi extends BaseAPI {
    /**
     * 
     * @summary Get group record
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} id Group Record ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupRecordsApi
     */
    public getGroupRecord(organizationId: number, projectId: number, id: number, options?: AxiosRequestConfig) {
        return GroupRecordsApiFp(this.configuration).getGroupRecord(organizationId, projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List group records
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {GroupRecordsListRequest} groupRecordsListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupRecordsApi
     */
    public groupRecordsList(organizationId: number, projectId: number, groupRecordsListRequest: GroupRecordsListRequest, options?: AxiosRequestConfig) {
        return GroupRecordsApiFp(this.configuration).groupRecordsList(organizationId, projectId, groupRecordsListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update group record
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} id Group Record ID
     * @param {UpdateGroupRecordRequest} updateGroupRecordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupRecordsApi
     */
    public updateGroupRecord(organizationId: number, projectId: number, id: number, updateGroupRecordRequest: UpdateGroupRecordRequest, options?: AxiosRequestConfig) {
        return GroupRecordsApiFp(this.configuration).updateGroupRecord(organizationId, projectId, id, updateGroupRecordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PropertiesApi - axios parameter creator
 * @export
 */
export const PropertiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Event custom properties list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customPropertiesList: async (organizationId: number, projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('customPropertiesList', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('customPropertiesList', 'projectId', projectId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/custom-properties`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PropertiesApi - functional programming interface
 * @export
 */
export const PropertiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PropertiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Event custom properties list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customPropertiesList(organizationId: number, projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomPropertiesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customPropertiesList(organizationId, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PropertiesApi - factory interface
 * @export
 */
export const PropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PropertiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Event custom properties list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customPropertiesList(organizationId: number, projectId: number, options?: any): AxiosPromise<CustomPropertiesList200Response> {
            return localVarFp.customPropertiesList(organizationId, projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PropertiesApi - object-oriented interface
 * @export
 * @class PropertiesApi
 * @extends {BaseAPI}
 */
export class PropertiesApi extends BaseAPI {
    /**
     * 
     * @summary Event custom properties list
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public customPropertiesList(organizationId: number, projectId: number, options?: AxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).customPropertiesList(organizationId, projectId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PropertyValuesApi - axios parameter creator
 * @export
 */
export const PropertyValuesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List of property values
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {ListPropertyValuesRequest} listPropertyValuesRequest property type and property id/name must be specified. Event is optional and  works as a filter for values 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyValuesList: async (organizationId: number, projectId: number, listPropertyValuesRequest: ListPropertyValuesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('propertyValuesList', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('propertyValuesList', 'projectId', projectId)
            // verify required parameter 'listPropertyValuesRequest' is not null or undefined
            assertParamExists('propertyValuesList', 'listPropertyValuesRequest', listPropertyValuesRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/property-values`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listPropertyValuesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PropertyValuesApi - functional programming interface
 * @export
 */
export const PropertyValuesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PropertyValuesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List of property values
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {ListPropertyValuesRequest} listPropertyValuesRequest property type and property id/name must be specified. Event is optional and  works as a filter for values 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertyValuesList(organizationId: number, projectId: number, listPropertyValuesRequest: ListPropertyValuesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyValuesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertyValuesList(organizationId, projectId, listPropertyValuesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PropertyValuesApi - factory interface
 * @export
 */
export const PropertyValuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PropertyValuesApiFp(configuration)
    return {
        /**
         * 
         * @summary List of property values
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {ListPropertyValuesRequest} listPropertyValuesRequest property type and property id/name must be specified. Event is optional and  works as a filter for values 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertyValuesList(organizationId: number, projectId: number, listPropertyValuesRequest: ListPropertyValuesRequest, options?: any): AxiosPromise<PropertyValuesList200Response> {
            return localVarFp.propertyValuesList(organizationId, projectId, listPropertyValuesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PropertyValuesApi - object-oriented interface
 * @export
 * @class PropertyValuesApi
 * @extends {BaseAPI}
 */
export class PropertyValuesApi extends BaseAPI {
    /**
     * 
     * @summary List of property values
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {ListPropertyValuesRequest} listPropertyValuesRequest property type and property id/name must be specified. Event is optional and  works as a filter for values 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyValuesApi
     */
    public propertyValuesList(organizationId: number, projectId: number, listPropertyValuesRequest: ListPropertyValuesRequest, options?: AxiosRequestConfig) {
        return PropertyValuesApiFp(this.configuration).propertyValuesList(organizationId, projectId, listPropertyValuesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Event segmentation query
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {EventSegmentation} [eventSegmentation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSegmentationQuery: async (organizationId: number, projectId: number, eventSegmentation?: EventSegmentation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('eventSegmentationQuery', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('eventSegmentationQuery', 'projectId', projectId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/queries/event-segmentation`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventSegmentation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Funnel query
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {FunnelQuery} [funnelQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funnelQuery: async (organizationId: number, projectId: number, funnelQuery?: FunnelQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('funnelQuery', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('funnelQuery', 'projectId', projectId)
            const localVarPath = `/organizations/{organizationId}/projects/{projectId}/queries/funnel`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(funnelQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Event segmentation query
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {EventSegmentation} [eventSegmentation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSegmentationQuery(organizationId: number, projectId: number, eventSegmentation?: EventSegmentation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataTableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventSegmentationQuery(organizationId, projectId, eventSegmentation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Funnel query
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {FunnelQuery} [funnelQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async funnelQuery(organizationId: number, projectId: number, funnelQuery?: FunnelQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataTableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.funnelQuery(organizationId, projectId, funnelQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueryApiFp(configuration)
    return {
        /**
         * 
         * @summary Event segmentation query
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {EventSegmentation} [eventSegmentation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSegmentationQuery(organizationId: number, projectId: number, eventSegmentation?: EventSegmentation, options?: any): AxiosPromise<DataTableResponse> {
            return localVarFp.eventSegmentationQuery(organizationId, projectId, eventSegmentation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Funnel query
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {FunnelQuery} [funnelQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funnelQuery(organizationId: number, projectId: number, funnelQuery?: FunnelQuery, options?: any): AxiosPromise<DataTableResponse> {
            return localVarFp.funnelQuery(organizationId, projectId, funnelQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
    /**
     * 
     * @summary Event segmentation query
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {EventSegmentation} [eventSegmentation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public eventSegmentationQuery(organizationId: number, projectId: number, eventSegmentation?: EventSegmentation, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).eventSegmentationQuery(organizationId, projectId, eventSegmentation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Funnel query
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {FunnelQuery} [funnelQuery] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public funnelQuery(organizationId: number, projectId: number, funnelQuery?: FunnelQuery, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).funnelQuery(organizationId, projectId, funnelQuery, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {CreateReportRequest} createReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: async (organizationId: number, projectId: number, createReportRequest: CreateReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('createReport', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createReport', 'projectId', projectId)
            // verify required parameter 'createReportRequest' is not null or undefined
            assertParamExists('createReport', 'createReportRequest', createReportRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/reports`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} reportId Report ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport: async (organizationId: number, projectId: number, reportId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('deleteReport', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteReport', 'projectId', projectId)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('deleteReport', 'reportId', reportId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/reports/{reportId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} reportId Report ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport: async (organizationId: number, projectId: number, reportId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getReport', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getReport', 'projectId', projectId)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getReport', 'reportId', reportId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/reports/{reportId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reports list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsList: async (organizationId: number, projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('reportsList', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('reportsList', 'projectId', projectId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/reports`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} reportId Report ID
         * @param {UpdateReportRequest} updateReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport: async (organizationId: number, projectId: number, reportId: number, updateReportRequest: UpdateReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateReport', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateReport', 'projectId', projectId)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('updateReport', 'reportId', reportId)
            // verify required parameter 'updateReportRequest' is not null or undefined
            assertParamExists('updateReport', 'updateReportRequest', updateReportRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/reports/{reportId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {CreateReportRequest} createReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReport(organizationId: number, projectId: number, createReportRequest: CreateReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReport(organizationId, projectId, createReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} reportId Report ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReport(organizationId: number, projectId: number, reportId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReport(organizationId, projectId, reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} reportId Report ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReport(organizationId: number, projectId: number, reportId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReport(organizationId, projectId, reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reports list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsList(organizationId: number, projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsList(organizationId, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} reportId Report ID
         * @param {UpdateReportRequest} updateReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReport(organizationId: number, projectId: number, reportId: number, updateReportRequest: UpdateReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReport(organizationId, projectId, reportId, updateReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {CreateReportRequest} createReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(organizationId: number, projectId: number, createReportRequest: CreateReportRequest, options?: any): AxiosPromise<Report> {
            return localVarFp.createReport(organizationId, projectId, createReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} reportId Report ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport(organizationId: number, projectId: number, reportId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReport(organizationId, projectId, reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} reportId Report ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport(organizationId: number, projectId: number, reportId: number, options?: any): AxiosPromise<Report> {
            return localVarFp.getReport(organizationId, projectId, reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reports list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsList(organizationId: number, projectId: number, options?: any): AxiosPromise<ReportsList200Response> {
            return localVarFp.reportsList(organizationId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update report
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} reportId Report ID
         * @param {UpdateReportRequest} updateReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport(organizationId: number, projectId: number, reportId: number, updateReportRequest: UpdateReportRequest, options?: any): AxiosPromise<Report> {
            return localVarFp.updateReport(organizationId, projectId, reportId, updateReportRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * 
     * @summary Create report
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {CreateReportRequest} createReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public createReport(organizationId: number, projectId: number, createReportRequest: CreateReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).createReport(organizationId, projectId, createReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete report
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} reportId Report ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public deleteReport(organizationId: number, projectId: number, reportId: number, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).deleteReport(organizationId, projectId, reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get report
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} reportId Report ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReport(organizationId: number, projectId: number, reportId: number, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getReport(organizationId, projectId, reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reports list
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reportsList(organizationId: number, projectId: number, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).reportsList(organizationId, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update report
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} reportId Report ID
     * @param {UpdateReportRequest} updateReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public updateReport(organizationId: number, projectId: number, reportId: number, updateReportRequest: UpdateReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).updateReport(organizationId, projectId, reportId, updateReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserPropertiesApi - axios parameter creator
 * @export
 */
export const UserPropertiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} propertyId Property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProperty: async (organizationId: number, projectId: number, propertyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getUserProperty', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getUserProperty', 'projectId', projectId)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('getUserProperty', 'propertyId', propertyId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/user-properties/{propertyId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} propertyId Property ID
         * @param {UpdatePropertyRequest} updatePropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProperty: async (organizationId: number, projectId: number, propertyId: number, updatePropertyRequest: UpdatePropertyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateUserProperty', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateUserProperty', 'projectId', projectId)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('updateUserProperty', 'propertyId', propertyId)
            // verify required parameter 'updatePropertyRequest' is not null or undefined
            assertParamExists('updateUserProperty', 'updatePropertyRequest', updatePropertyRequest)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/user-properties/{propertyId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePropertyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User properties list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPropertiesList: async (organizationId: number, projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('userPropertiesList', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('userPropertiesList', 'projectId', projectId)
            const localVarPath = `/v1/organizations/{organizationId}/projects/{projectId}/schema/user-properties`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserPropertiesApi - functional programming interface
 * @export
 */
export const UserPropertiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserPropertiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get user property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} propertyId Property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProperty(organizationId: number, projectId: number, propertyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProperty(organizationId, projectId, propertyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} propertyId Property ID
         * @param {UpdatePropertyRequest} updatePropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProperty(organizationId: number, projectId: number, propertyId: number, updatePropertyRequest: UpdatePropertyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserProperty(organizationId, projectId, propertyId, updatePropertyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary User properties list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPropertiesList(organizationId: number, projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPropertiesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userPropertiesList(organizationId, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserPropertiesApi - factory interface
 * @export
 */
export const UserPropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserPropertiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get user property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} propertyId Property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProperty(organizationId: number, projectId: number, propertyId: number, options?: any): AxiosPromise<Property> {
            return localVarFp.getUserProperty(organizationId, projectId, propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user property
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {number} propertyId Property ID
         * @param {UpdatePropertyRequest} updatePropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProperty(organizationId: number, projectId: number, propertyId: number, updatePropertyRequest: UpdatePropertyRequest, options?: any): AxiosPromise<Property> {
            return localVarFp.updateUserProperty(organizationId, projectId, propertyId, updatePropertyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User properties list
         * @param {number} organizationId 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPropertiesList(organizationId: number, projectId: number, options?: any): AxiosPromise<UserPropertiesList200Response> {
            return localVarFp.userPropertiesList(organizationId, projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserPropertiesApi - object-oriented interface
 * @export
 * @class UserPropertiesApi
 * @extends {BaseAPI}
 */
export class UserPropertiesApi extends BaseAPI {
    /**
     * 
     * @summary Get user property
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} propertyId Property ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPropertiesApi
     */
    public getUserProperty(organizationId: number, projectId: number, propertyId: number, options?: AxiosRequestConfig) {
        return UserPropertiesApiFp(this.configuration).getUserProperty(organizationId, projectId, propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user property
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {number} propertyId Property ID
     * @param {UpdatePropertyRequest} updatePropertyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPropertiesApi
     */
    public updateUserProperty(organizationId: number, projectId: number, propertyId: number, updatePropertyRequest: UpdatePropertyRequest, options?: AxiosRequestConfig) {
        return UserPropertiesApiFp(this.configuration).updateUserProperty(organizationId, projectId, propertyId, updatePropertyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User properties list
     * @param {number} organizationId 
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPropertiesApi
     */
    public userPropertiesList(organizationId: number, projectId: number, options?: AxiosRequestConfig) {
        return UserPropertiesApiFp(this.configuration).userPropertiesList(organizationId, projectId, options).then((request) => request(this.axios, this.basePath));
    }
}


