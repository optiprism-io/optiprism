/* tslint:disable */
/* eslint-disable */
/**
 * OptiPrism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@optiprism.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * Event describes user event. User event is an action which user (client) might do on a product site/app. For instance, user might do a signup and it might be a \"Sign up\" event. Event Also has a properties. <br/><br/> Name must be unique among project events, including custom ones. E.g. you can't have multiple \"Sign up\" events. <br/><br/> Normally events are created and updated by admin in a project scope, but there are also system events, which can't be deleted or modified. 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * event unique id
     * @type {number}
     * @memberof Event
     */
    id: number;
    /**
     * create date
     * @type {Date}
     * @memberof Event
     */
    createdAt: Date;
    /**
     * update (once updated)
     * @type {Date}
     * @memberof Event
     */
    updatedAt?: Date;
    /**
     * id of creator User
     * @type {number}
     * @memberof Event
     */
    createdBy: number;
    /**
     * id of updater User
     * @type {number}
     * @memberof Event
     */
    updatedBy?: number;
    /**
     * project id
     * @type {number}
     * @memberof Event
     */
    projectId: number;
    /**
     * the event is a system-wide, shown in any project and can't be modified by a regular user
     * @type {boolean}
     * @memberof Event
     */
    isSystem: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Event
     */
    tags?: Array<string>;
    /**
     * event name. Must be unique among all project events (including custom). The name field is used while events ingesting.
     * @type {string}
     * @memberof Event
     */
    name: string;
    /**
     * event name to display. If empty then name property is used.
     * @type {string}
     * @memberof Event
     */
    displayName?: string;
    /**
     * description
     * @type {string}
     * @memberof Event
     */
    description?: string;
    /**
     * event status
     * @type {string}
     * @memberof Event
     */
    status: EventStatusEnum;
    /**
     * array of id of attached to event properties
     * @type {Array<number>}
     * @memberof Event
     */
    eventProperties?: Array<number>;
    /**
     * array of id of attached to user properties
     * @type {Array<number>}
     * @memberof Event
     */
    userProperties?: Array<number>;
}

/**
    * @export
    * @enum {string}
    */
export enum EventStatusEnum {
    Enabled = 'enabled',
    Disabled = 'disabled'
}

