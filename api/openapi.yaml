openapi: 3.0.0
info:
  version: 1.0.0
  title: OptiPrism
  termsOfService: https://optiprism.io/terms/
  contact:
    email: api@optiprism.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/optiprism/optiprism/1.0.0
  - description: OptiPrism API server
    url: /df
tags:
  - name: events
    description: Events
  - name: properties
    description: Properties
  - name: reports
    description: Reports
externalDocs:
  description: Find out more about OptiPrism api
  url: https://dev.optiprism.io/api

paths:
  /v1/auth/basic/login:
    post:
      summary: Basic login
      operationId: basicLogin
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: ['email','password']
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: tokens
          content:
            application/json:
              schema:
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  csrfToken:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/auth/access:
    post:
      summary: Refresh access token
      operationId: authAccess
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [ 'refreshToken']
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: tokens
          content:
            application/json:
              schema:
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  csrfToken:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/auth/logout:
    post:
      summary: Log out
      operationId: logout
      tags:
        - auth
      responses:
        '204':
          description: logout
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/schema/events:
    get:
      summary: Events list
      operationId: eventsList
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: event list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - properties:
                      events:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/schema/events/{event_id}:
    get:
      summary: Get event
      operationId: getEvent
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
        - name: event_id
          in: path
          description: Event ID
          required: true
          schema:
            type: number
      responses:
        200:
          description: event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    put:
      summary: Update event
      operationId: updateEvent
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
        - name: event_id
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        200:
          description: event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/schema/custom-events:
    get:
      summary: Custom events list
      operationId: customEventsList
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: custom event list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - properties:
                      events:
                        type: array
                        items:
                          $ref: '#/components/schemas/CustomEvent'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    post:
      summary: Create custom event
      operationId: createCustomEvent
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomEventRequest'
      responses:
        201:
          description: custom event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/schema/custom-events/{event_id}:
    get:
      summary: Get custom event
      operationId: getCustomEvent
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
        - name: event_id
          in: path
          description: Event ID
          required: true
          schema:
            type: number
      responses:
        200:
          description: custom event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    delete:
      summary: Delete custom event
      operationId: deleteCustomEvent
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
        - name: event_id
          in: path
          description: Event ID
          required: true
          schema:
            type: number
      responses:
        204:
          description: deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    put:
      summary: Update custom event
      operationId: updateCustomEvent
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
        - name: event_id
          in: path
          description: Custom Event ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomEventRequest'
      responses:
        201:
          description: custom event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/schema/user_properties:
    get:
      summary: User properties list
      operationId: userPropertiesList
      security:
        - bearerAuth: [ ]
      tags:
        - properties
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: properties list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - properties:
                      events:
                        type: array
                        items:
                          $ref: '#/components/schemas/Property'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/schema/event_properties:
    get:
      summary: Event properties list
      operationId: eventPropertiesList
      security:
        - bearerAuth: [ ]
      tags:
        - properties
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: properties list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - properties:
                      events:
                        type: array
                        items:
                          $ref: '#/components/schemas/Property'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/schema/user_properties/{property_id}:
    get:
      summary: Get user property
      operationId: getUserProperty
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
        - name: property_id
          in: path
          description: Property ID
          required: true
          schema:
            type: number
      responses:
        201:
          description: user property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    put:
      summary: Update user property
      operationId: updateUserProperty
      security:
        - bearerAuth: [ ]
      tags:
        - properties
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
        - name: property_id
          in: path
          description: Property ID
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertyRequest'
      responses:
        201:
          description: property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/schema/event_properties/{property_id}:
    get:
      summary: Get event property
      operationId: getEventProperty
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
        - name: property_id
          in: path
          description: Property ID
          required: true
          schema:
            type: number
      responses:
        201:
          description: event property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    put:
      summary: Update event property
      operationId: updateEventProperty
      security:
        - bearerAuth: [ ]
      tags:
        - properties
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
        - name: property_id
          in: path
          description: Property ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertyRequest'
      responses:
        201:
          description: property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/schema/custom-properties:
    get:
      summary: Event custom properties list
      operationId: customPropertiesList
      security:
        - bearerAuth: [ ]
      tags:
        - properties
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: event custom properties list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - properties:
                      events:
                        type: array
                        items:
                          $ref: '#/components/schemas/CustomProperty'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/data/events-stream:
    post:
      summary: Get ingested events
      operationId: eventsStream
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventListRequest'

      responses:
        '200':
          description: events list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - properties:
                      events:
                        type: array
                        items:
                          type: object
                          example: >
                            {
                              "name": "Buy Product",
                              "properties": {
                                createdAt: "2017-07-21T17:32:28Z",
                                "Product Name": "TV",
                              },
                              "userProperties": {
                                "country": "UK"
                              },
                              "matchedCustomEvents": [
                                {
                                  "id": 1
                                }
                              ]
                            }
                          properties:
                            name:
                              type: string
                            properties:
                              type: object
                              description: map of property name and property value pairs
                            matchedCustomEvents:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: integer

                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/organizations/{organization_id}/projects/{project_id}/data/property-values:
    post:
      summary: List of property values
      operationId: PropertyValuesList
      security:
        - bearerAuth: [ ]
      tags:
        - properties
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        description: property type and property id/name must be specified. Event is optional and works as a filter for values
        content:
          application/json:
            schema:
              type: object
              properties:
                eventName:
                  type: string
                  description: use event name only with eventType=event|user
                eventId:
                  type: number
                  description: use event id only with eventType=custom
                eventType:
                  type: string
                  enum:
                    - event
                    - user
                    - custom
                propertyName:
                  type: string
                  description: use property name only with propertyType=event|user
                propertyId:
                  type: number
                  description: use property id only with propertyType=custom
                propertyType:
                  type: string
                  enum:
                    - event
                    - user
                    - custom

      responses:
        '200':
          description: list property values
          content:
            application/json:
              schema:
                type: object
                properties:
                  values:
                    oneOf:
                      - type: array
                        items:
                          type: string
                      - type: array
                        items:
                          type: number
                      - type: array
                        items:
                          type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /organizations/{organization_id}/projects/{project_id}/reports/event-segmentation:
    post:
      summary: Event segmentation query
      operationId: eventSegmentationQuery
      security:
        - bearerAuth: [ ]
      tags:
        - reports
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSegmentation'
      responses:
        '200':
          description: event segmentation query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataTableResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /organizations/{organization_id}/projects/{project_id}/reports/funnel:
    post:
      summary: Funnel query
      operationId: funnelQuery
      security:
        - bearerAuth: [ ]
      tags:
        - query
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunnelQuery'
      responses:
        '200':
          description: funnel query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataTableResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    OrganizationID:
      name: organization_id
      in: path
      required: true
      schema:
        type: number
    ProjectID:
      name: project_id
      in: path
      required: true
      schema:
        type: number

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Internal:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServiceUnavailable:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int64
        httpCode:
          type: integer
          format: int64
        message:
          type: string
        fields:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
    JWTToken:
      type: object
      required: [ 'accountId','organizationId','iss','exp','nbf','iat','jti' ]
      description: see  https://datatracker.ietf.org/doc/html/rfc7519
      properties:
        accountId:
          type: integer
          format: int64
        organizationId:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        iss:
          type: string
          enum:
            - optiprism
        exp:
          type: integer
          format: int64
        nbf:
          type: integer
          format: int64
        iat:
          type: integer
          format: int64
        jti:
          type: integer
          format: string

    DataTableResponse:
      type: object
      properties:
        columns:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - dimension
                  - metric
                  - metricValue
              dataType:
                $ref: '#/components/schemas/DataType'
              name:
                type: string
              values:
                oneOf:
                  - type: array
                    items:
                      type: string
                  - type: array
                    items:
                      type: number
                  - type: array
                    items:
                      type: boolean
              compareValues:
                oneOf:
                  - type: array
                    items:
                      type: string
                  - type: array
                    items:
                      type: number
                  - type: array
                    items:
                      type: boolean

    ListResponseMetadata:
      description: list response metadata
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
            prev:
              type: string
            total:
              type: integer

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        updatedBy:
          type: integer
          format: int64
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
        teams:
          type: array
          items:
            type: integer
        projects:
          type: array
          items:
            type: object
            properties:
              projectId:
                type: integer
                format: int64
              role:
                type: string
        status:
          type: string

    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        updatedBy:
          type: integer
          format: int64
        name:
          type: string
        sessionTimeoutSeconds:
          type: integer
        teams:
          type: array
          items:
            type: integer
        users:
          type: array
          items:
            type: integer

    Organization:
      type: object
      properties:
        teams:
          type: array
          items:
            type: integer
        users:
          type: array
          items:
            type: integer

    EventRecord:
      type: object
      example: >
        {
          "name": "Buy Product",
          "properties": {
            "country": "UK",
            "Product Name": "TV"
          }
        }
      properties:
        name:
          type: string
        properties:
          type: object
          description: map of property name and property value pairs

    Event:
      type: object
      required: [ "id","createdAt","createdBy","projectId","isSystem","name","status" ]
      description: Event describes user event. User event is an action which user (client) might do on a product site/app. For instance, user might do a signup and it might be a "Sign up" event. Event Also has a properties.
        <br/><br/>
        Name must be unique among project events, including custom ones. E.g. you can't have multiple "Sign up" events.
        <br/><br/>
        Normally events are created and updated by admin in a project scope, but there are also system events, which can't be deleted or modified.
      properties:
        id:
          type: integer
          format: int64
          description: event unique id
        createdAt:
          type: string
          format: date-time
          description: create date
        updatedAt:
          type: string
          format: date-time
          description: update (once updated)
        createdBy:
          type: integer
          format: int64
          description: id of creator User
        updatedBy:
          type: integer
          format: int64
          description: id of updater User
        projectId:
          type: integer
          format: int64
          description: project id
        isSystem:
          type: boolean
          description: the event is a system-wide, shown in any project and can't be modified by a regular user
        tags:
          type: array
          items:
            type: string
            description: event tags
        name:
          type: string
          description: event name. Must be unique among all project events (including custom). The name field is used while events ingesting.
        displayName:
          type: string
          description: event name to display. If empty then name property is used.
        description:
          type: string
          description: description
        status:
          type: string
          enum:
            - enabled
            - disabled
          description: event status
        eventProperties:
          type: array
          items:
            type: integer
            format: i64
          description: array of id of attached to event properties
        userProperties:
          type: array
          items:
            type: integer
            format: i64
          description: array of id of attached to user properties

    UpdateEventRequest:
      description: Update event request
      type: object
      properties:
        displayName:
          type: string
          description: event name to display. If empty then name property is used.
        description:
          type: string
          description: description
        status:
          type: string
          enum:
            - enabled
            - disabled
        tags:
          type: array
          items:
            type: string

    CustomEvent:
      required: [ "id","createdAt","createdBy","projectId","isSystem","name","status" ]
      description: Custom Event is an alias to an expression which is used while querying. You can use regular or custom events in expression. You can combine events in expression, you can use filter by properties.
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        updatedBy:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        isSystem:
          type: boolean
        status:
          type: string
          enum:
            - enabled
            - disabled
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/CustomEventEvent'

    CreateCustomEventRequest:
      required: [ "name","events" ]
      description: Custom Event is an alias to an expression which is used while querying. You can use regular or custom events in expression. You can combine events in expression, you can use filter by properties.
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/CustomEventEvent'

    UpdateCustomEventRequest:
      required: [ "name","events" ]
      description: Custom Event is an alias to an expression which is used while querying. You can use regular or custom events in expression. You can combine events in expression, you can use filter by properties.
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - enabled
            - disabled
        tags:
          type: array
          items:
            type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/CustomEventEvent'

    CustomEventEvent:
      type: object
      description: custom event will matches all of the provided events
      required: [ "eventType", "filters" ]
      allOf:
        - $ref: '#/components/schemas/EventRef'
        - type: object
          properties:
            filters:
              type: array
              description: array of event filters
              items:
                $ref: '#/components/schemas/EventFilterByProperty'

    Property:
      type: object
      required: [ "id","createdAt","createdBy","projectId","isSystem","scope","name","status","isRequired","nullable","isArray","isDictionary" ]
      description: property defines event or user property. For example, event "Buy product" may contains next properties like "Product name" and "Price."
      properties:
        id:
          type: integer
          format: int64
          description: property unique id
        createdAt:
          type: string
          format: date-time
          description: create date
        updatedAt:
          type: string
          format: date-time
          description: update (once updated)
        createdBy:
          type: integer
          format: int64
          description: id of creator User
        updatedBy:
          type: integer
          format: int64
          description: id of updater User
        projectId:
          type: integer
          format: int64
          description: project id
        events:
          type: array
          items:
            type: integer
            format: i64
          description: list of id of events which use this property
        type:
          type: string
          enum:
            - event
            - user
        isSystem:
          type: boolean
          description: the property is a system-wide, shown in any project and can't be modified by a regular user
        tags:
          type: array
          items:
            type: string
        name:
          type: string
          description: property name. Must be unique
        displayName:
          type: string
          description: property name to display. If empty then name is used.
        description:
          type: string
          description: description
        status:
          type: string
          enum:
            - enabled
            - disabled
          description: property status
        dataType:
          allOf:
            - type: object
              description: data type of property. if property is "Product name", that it whould be String, if "Revenue", that it might be numeric.
            - $ref: '#/components/schemas/DataType'
        nullable:
          type: boolean
          description: nullable property might contains null value
        isArray:
          type: boolean
          description: array property might contents multiple values
        isDictionary:
          type: boolean
          description: dictionary can efficiently packs strings provided that cardinality will be relatively log (16bits is a reasonable maximum)
        dictionaryType:
          allOf:
            - type: object
              description: type of integer to pack. Between 8bits and 16bits
            - $ref: '#/components/schemas/DataType'

    UpdatePropertyRequest:
      type: object
      description: Propetty update
      properties:
        displayName:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - enabled
            - disabled
        tags:
          type: array
          items:
            type: string

    CustomProperty:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        updatedBy:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        events:
          type: array
          items:
            type: integer
            format: i64
        isSystem:
          type: boolean
        status:
          type: string
          enum:
            - enabled
            - disabled
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/DataType'
        nullable:
          type: boolean
        isArray:
          type: boolean
        tags:
          type: array
          items:
            type: string

    EventListRequest:
      type: object
      description: request events sorted by time of creation
      required: [ "time", "events" ]
      example: >
        {
          "time": {
            "type": "between",
            "from": "2017-07-21T17:32:28Z",
            "to": "2017-08-21T17:32:28Z"
          },
          "events": [
            {
              "eventName": "Buy Product",
              "eventType": "regular",
              "filters": [
                {
                  "filterType": "property",
                  "propertyName": "Device",
                  "propertyType": "user",
                  "operation": "exists"
                },
                {
                  "filterType": "property",
                  "propertyName": "Product Name",
                  "propertyType": "event",
                  "operation": "=",
                  "value": [
                    "tv"
                  ]
                }
              ]
            }
          ],
          "filters": [
            {
              "filterType": "property",
              "propertyName": "Region",
              "propertyType": "user",
              "operation": "exists"
            }
          ]
        }
      properties:
        time:
          type: object
          description: select time
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeFrom'
            - $ref: '#/components/schemas/TimeLast'
        search:
          type: object
          description: search in results
          properties:
            term:
              type: string
            eventProperties:
              type: array
              items:
                type: string
            userProperties:
              type: array
              items:
                type: string
        events:
          type: array
          description: array of events to query
          items:
            type: object
            required: [ "eventType" ]
            allOf:
              - $ref: '#/components/schemas/EventRef'
              - type: object
                properties:
                  filters:
                    type: array
                    description: array of event filters
                    items:
                      $ref: '#/components/schemas/EventFilterByProperty'
        filters:
          type: array
          description: array of common filters (which applies to all events)
          items:
            type: object
            oneOf:
              - $ref: '#/components/schemas/EventFilterByProperty'
              - $ref: '#/components/schemas/EventFilterByCohort'

    FunnelQuery:
      type: object
      properties:
        time:
          type: object
          description: select time
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeFrom'
            - $ref: '#/components/schemas/TimeLast'
        group:
          type: string
          description: group that is used in aggregations by group. For instance, group by user or group by organizartion.
          example: user

        steps:
          type: array
          items:
            type: object
            properties:
              events:
                type: array
                items:
                  $ref: '#/components/schemas/FunnelEvent'
              order:
                type: string
                enum:
                  - any
                  - exact

        timeWindow:
          type: object
          properties:
            n:
              type: integer
              description: N days/weeks
            unit:
              $ref: '#/components/schemas/TimeUnitWithSession'
            from:
              type: string
              enum:
                - anyDay
                - firstDay
        chartType:
          type: object
          anyOf:
            - $ref: '#/components/schemas/FunnelConversionStepsChartType'
            - $ref: '#/components/schemas/FunnelConversionOverTimeChartType'
            - $ref: '#/components/schemas/FunnelTimeToConvertChartType'
            - $ref: '#/components/schemas/FunnelFrequencyChartType'

        count:
          type: string
          enum:
            - uniques
            - totals

        stepOrder:
          type: string
          enum:
            - any
            - exactSequence
            - exactOrder
        attribution:
          type: object
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - firstTouch
                    - lastTouch
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - step
                step:
                  type: integer


        holdingConstants:
          type: array
          items:
            $ref: '#/components/schemas/PropertyRef'
        exclude:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/FunnelEvent'
              - $ref: '#/components/schemas/FunnelExcludeSteps'
        breakdowns:
          type: array
          description: array of breakdowns
          items:
            $ref: '#/components/schemas/BreakdownByProperty'

    FunnelConversionStepsChartType:
      type: object
      properties:
        type:
          type: string
          enum:
            - conversionSteps

    FunnelConversionStepsChartTypeResponse:
      type: object
      properties:
        dimensionHeaders:
          type: array
          items:
            type: string
        dimensions:
          type: array
          items:
            type: array
            items:
              type: string
        metrics:
          type: array
          items:
            type: string
            enum:
              - avgTimeToConvert
        singles:
          type: array
          items:
            type: integer
        series:
          type: array
          items:
            type: array
            items:
              type: number


    FunnelConversionOverTimeChartType:
      type: object
      properties:
        type:
          type: string
          enum:
            - conversionOverTime
        intervalUnit:
          $ref: '#/components/schemas/TimeUnit'

    FunnelTimeToConvertChartType:
      type: object
      properties:
        type:
          type: string
          enum:
            - timeToConvert
        intervalUnit:
          $ref: '#/components/schemas/TimeUnit'
        minInterval:
          type: integer
        maxInterval:
          type: integer

    FunnelFrequencyChartType:
      type: object
      properties:
        type:
          type: string
          enum:
            - frequency

    FunnelExcludeSteps:
      type: object
      properties:
        steps:
          type: object
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - all
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - between
                from:
                  type: integer
                to:
                  type: integer

    FunnelEvent:
      description: event object
      required: [ "eventType","queries" ]
      allOf:
        - $ref: '#/components/schemas/EventRef'
        - type: object
          properties:
            filters:
              type: array
              description: array of event filters
              items:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/EventFilterByProperty'

    AnalysisLinear:
      type: object
      properties:
        type:
          type: string
          enum:
            - linear

    AnalysisRollingAverage:
      type: object
      properties:
        type:
          type: string
          enum:
            - rollingAverage
        window:
          type: integer

    AnalysisRollingWindow:
      type: object
      properties:
        type:
          type: string
          enum:
            - rollingWindow
        window:
          type: integer

    AnalysisCumulative:
      type: object
      properties:
        type:
          type: string
          enum:
            - cumulative

    EventSegmentation:
      type: object
      description: event segmentation report type main payload
      required: [ "time","group","intervalUnit","chartType","analysis","events" ]
      example: >
        {
          "time": {
            "type": "between",
            "from": "2017-07-21T17:32:28Z",
            "to": "2017-08-21T17:32:28Z"
          },
          "group": "user",
          "intervalUnit": "day",
          "chartType": "line",
          "analysis": {
            "type": "linear"
          },
          "compare": {
            "offset": 1,
            "unit": "week"
          },
          "events": [
            {
              "eventName": "Buy Product",
              "eventType": "regular",
              "filters": [
                {
                  "filterType": "property",
                  "propertyName": "Device",
                  "propertyType": "user",
                  "operation": "exists"
                },
                {
                  "filterType": "property",
                  "propertyName": "Product Name",
                  "propertyType": "event",
                  "operation": "=",
                  "value": [
                    "tv"
                  ]
                }
              ],
              "breakdowns": [
                {
                  "breakdownType": "property",
                  "propertyName": "Device",
                  "propertyType": "user"
                }
              ],
              "queries": [
                {
                  "queryType": "simple",
                  "query": "countGroups"
                },
                {
                  "queryType": "countPerGroup",
                  "aggregate": "avg"
                },
                {
                  "queryType": "aggregateProperty",
                  "propertyName": "revenue",
                  "propertyType": "event",
                  "aggregate": "sum"
                },
                {
                  "queryType": "aggregatePropertyPerGroup",
                  "propertyName": "revenue",
                  "propertyType": "event",
                  "aggregate_per_group": "sum",
                  "aggregate": "avg"
                },
                {
                  "queryType": "formula",
                  "formula": "(A+B)/C"
                }
              ]
            }
          ],
          "breakdowns": [
            {
              "breakdownType": "property",
              "propertyName": "Country",
              "propertyType": "user"
            },
            {
              "breakdownType": "property",
              "propertyName": "Product Name",
              "propertyType": "event"
            }
          ],
          "filters": [
            {
              "filterType": "property",
              "propertyName": "Region",
              "propertyType": "user",
              "operation": "exists"
            }
          ]
        }
      properties:
        time:
          type: object
          description: select time
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeFrom'
            - $ref: '#/components/schemas/TimeLast'
        group:
          type: string
          description: group that is used in aggregations by group. For instance, group by user or group by organizartion.
          example: user
        intervalUnit:
          type: object
          allOf:
            - description: the interval unit, by which the grouping will go
            - $ref: '#/components/schemas/TimeUnit'
          example: day
        chartType:
          type: object
          allOf:
            - description: chart type
            - $ref: '#/components/schemas/EventChartType'
        analysis:
          type: object
          description: analysis type
          oneOf:
            - $ref: '#/components/schemas/AnalysisLinear'
            - $ref: '#/components/schemas/AnalysisRollingAverage'
            - $ref: '#/components/schemas/AnalysisRollingWindow'
            - $ref: '#/components/schemas/AnalysisCumulative'
        compare:
          type: object
          required: [ "offset","unit" ]
          description: optional comparison with previous period
          example: 1 day - compare with past day
          properties:
            offset:
              type: integer
              description: offset in past in timeUnit
              example: 1
            unit:
              type: object
              allOf:
                - description: time unit
                - $ref: '#/components/schemas/TimeUnit'
        events:
          type: array
          description: array of events to query
          items:
            $ref: '#/components/schemas/EventSegmentationEvent'
        filters:
          type: array
          description: array of common filters (which applies to all events)
          items:
            type: object
            oneOf:
              - $ref: '#/components/schemas/EventFilterByProperty'
              - $ref: '#/components/schemas/EventFilterByCohort'
        breakdowns:
          type: array
          description: array of common breakdowns (which applies to all events)
          items:
            $ref: '#/components/schemas/BreakdownByProperty'
        segments:
          description: array of segments
          type: array
          items:
            $ref: '#/components/schemas/EventSegmentationSegment'

    EventSegmentationEvent:
      description: event object
      required: [ "eventType","queries" ]
      allOf:
        - $ref: '#/components/schemas/EventRef'
        - type: object
          properties:
            filters:
              type: array
              description: array of event filters
              items:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/EventFilterByProperty'
            breakdowns:
              type: array
              items:
                type: object
                description: array of event breakdowns
                oneOf:
                  - $ref: '#/components/schemas/BreakdownByProperty'
            queries:
              type: array
              description: array of event queries
              items:
                $ref: '#/components/schemas/EventQuery'

    EventFilter:
      type: object
      description: event filter
      anyOf:
        - $ref: '#/components/schemas/EventFilterByCohort'
        - $ref: '#/components/schemas/EventFilterByProperty'

    EventFilterByCohort:
      type: object
      properties:
        type:
          type: string
          enum:
            - cohort
        cohortId:
          type: integer
          format: int64

    EventFilterByProperty:
      type: object
      description: filter by property. Use this in event filters or in common filters. If you use it in event then event will be inherited, if you use filter as a common, then property should be commnon for all events.
      required: [ "filterType","propertyType","operation" ]
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - property
        - $ref: '#/components/schemas/PropertyRef'
        - type: object
          properties:
            operation:
              $ref: '#/components/schemas/PropertyFilterOperation'
            value:
              description: one or several property values. May be not set if operation is "empty" or "exist"
              type: array
              items:
                $ref: '#/components/schemas/Value'

    EventQuery:
      type: object
      description: event query
      required: [ "query" ]
      properties:
        name:
          type: string
        query:
          type: object
          oneOf:
            - $ref: '#/components/schemas/QuerySimple'
            - $ref: '#/components/schemas/QueryCountPerGroup'
            - $ref: '#/components/schemas/QueryAggregatePropertyPerGroup'
            - $ref: '#/components/schemas/QueryAggregateProperty'
            - $ref: '#/components/schemas/QueryFormula'

    BreakdownByProperty:
      type: object
      description: breakdown by property.
      required: [ "breakdownType", "propertyType" ]
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - property
        - $ref: '#/components/schemas/PropertyRef'


    EventSegmentationSegment:
      type: object
      description: segment
      required: [ "conditions" ]
      properties:
        name:
          type: string
          description: name of segment
          example: iphone users
        conditions:
          type: array
          description: array of conditions
          items:
            $ref: '#/components/schemas/SegmentCondition'

    SegmentCondition:
      type: object
      oneOf:
        - $ref: '#/components/schemas/SegmentConditionHasPropertyValue'
        - $ref: '#/components/schemas/SegmentConditionHadPropertyValue'
        - $ref: '#/components/schemas/SegmentConditionDidEvent'
        - $ref: '#/components/schemas/SegmentConditionFunnel'
        - $ref: '#/components/schemas/SegmentConditionRetained'

    TimeBetween:
      type: object
      description: time range between fixed values
      required: [ "type","from","to" ]
      example: >
        {
          "time": {
            "type": "between",
            "from": "2017-07-21T17:32:28Z",
            "to": "2017-08-21T17:32:28Z"
          }
        }
      properties:
        type:
          type: string
          enum:
            - between
        from:
          type: string
          format: date-time
          description: start date
          example: 2017-07-21T17:32:28Z
        to:
          type: string
          format: date-time
          description: end date
          example: 2017-08-21T17:32:28Z

    TimeFrom:
      type: object
      description: time range between fixed value and current time
      required: [ "type","from" ]
      example: >
        {
          "time": {
            "type": "from",
            "from": "2017-07-21T17:32:28Z"
          }
        }
      properties:
        type:
          type: string
          enum:
            - from
        from:
          type: string
          format: date-time
          description: start date
          example: 2017-0-21T17:32:28Z

    TimeLast:
      type: object
      description: take last N days/weeks
      required: [ "type","n","unit" ]
      example: >
        {
          "time": {
            "type": "last",
            "n": 10,
            "unit":"day"
          }
        }
      properties:
        type:
          type: string
          enum:
            - last
        n:
          type: integer
          description: N days/weeks
        unit:
          $ref: '#/components/schemas/TimeUnit'

    TimeAfterFirstUse:
      type: object
      description: time spent after the first use of event. Use in segmentation
      required: [ "type","within","unit" ]
      example: >
        within 2 days after first use - select event which was triggered within 2 days of it's first use by user

        {
          "time": {
            "type": "afterFirstUse",
            "within": 10,
            "unit":"day"
          }
        }
      properties:
        type:
          type: string
          enum:
            - afterFirstUse
        within:
          type: integer
        unit:
          $ref: '#/components/schemas/TimeUnit'

    TimeWindowEach:
      type: object
      description: >
        window operation for segmentation. Tells that event should be triggered each timeunit (each day, for instance)

        {
          "time": {
            "type": "each",
            "unit":"day"
          }
        }
      required: [ "type","unit" ]
      properties:
        type:
          type: string
          enum:
            - windowEach
        unit:
          $ref: '#/components/schemas/TimeUnit'

    TimeUnit:
      type: string
      description: time unit
      enum:
        - "second"
        - "minute"
        - "hour"
        - "day"
        - "week"
        - "month"
        - "year"

    TimeUnitWithSession:
      type: string
      description: time unit with session
      enum:
        - "second"
        - "minute"
        - "hour"
        - "day"
        - "week"
        - "month"
        - "year"
        - "session"

    EventChartType:
      type: string
      description: chart type
      enum:
        - "line"
        - "bar"
        - "singleValue"

    SegmentConditionHasPropertyValue:
      type: object
      description: check whether the user currently has a property with a value
      required: [ "type","propertyName","operation" ]
      properties:
        type:
          type: string
          enum:
            - hasPropertyValue
        propertyName:
          type: string
          description: property name. Because property here is a user only, we don't need propertyType
        operation:
          type: object
          allOf:
            - description: operation
            - $ref: '#/components/schemas/PropertyFilterOperation'
        values:
          type: array
          description: one or more values. Doesn't need if operation is "empty" or "exist"
          items:
            $ref: '#/components/schemas/Value'

    SegmentConditionHadPropertyValue:
      type: object
      description: check whether the user had a property with a value
      required: [ "type","propertyName","operation","time" ]
      properties:
        type:
          type: string
          enum:
            - hadPropertyValue
        propertyName:
          type: string
          description: property name. Because property here is a user only, we don't need propertyType
        operation:
          type: object
          allOf:
            - description: operation
            - $ref: '#/components/schemas/PropertyFilterOperation'
        values:
          type: array
          description: one or more values. Doesn't need if operation is "empty" or "exist"
          items:
            $ref: '#/components/schemas/Value'
        time:
          type: object
          description: time frame
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeLast'
            - $ref: '#/components/schemas/TimeWindowEach'

    DidEventCount:
      type: object
      description: find all users who made event X times
      example: filter who made at least 1 purchase each day
      required: [ "type","operation","time" ]
      properties:
        type:
          type: string
          enum:
            - didEventCount
        operation:
          $ref: '#/components/schemas/PropertyFilterOperation'
        value:
          type: integer
          description: one or more values. Doesn't need if operation is "empty" or "exist"
        time:
          type: object
          description: time frame
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeLast'
            - $ref: '#/components/schemas/TimeAfterFirstUse'
            - $ref: '#/components/schemas/TimeWindowEach'

    DidEventRelativeCount:
      type: object
      description: find all users who made left event X time more/less than right event.
      example: find users who viewed product more than bought product in last 30 days
      required: [ "type","operation","rightEvent","time" ]
      properties:
        type:
          type: string
          enum:
            - didEventRelativeCount
        operation:
          $ref: '#/components/schemas/PropertyFilterOperation'
        rightEvent:
          $ref: '#/components/schemas/EventRef'
        time:
          type: object
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeLast'
            - $ref: '#/components/schemas/TimeAfterFirstUse'
            - $ref: '#/components/schemas/TimeWindowEach'

    DidEventAggregateProperty:
      type: object
      description: aggregate property and compare to value
      example: find who made sum(revenue) >$1000 in last 30 days
      required: [ "type","propertyType","aggregate","operation","time" ]
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - aggregateProperty
        - $ref: '#/components/schemas/PropertyRef'
        - type: object
          properties:
            aggregate:
              $ref: '#/components/schemas/QueryAggregateProperty'
            operation:
              $ref: '#/components/schemas/PropertyFilterOperation'
            value:
              type: integer
              description: one or more values. Doesn't need if operation is "empty" or "exist"
            time:
              type: object
              description: time frame
              oneOf:
                - $ref: '#/components/schemas/TimeBetween'
                - $ref: '#/components/schemas/TimeLast'
                - $ref: '#/components/schemas/TimeAfterFirstUse'
                - $ref: '#/components/schemas/TimeWindowEach'

    DidEventHistoricalCount:
      type: object
      description: find users with Nth event occurance
      example: find who made an event 3rd time in last month
      required: [ "type", "propertyType","operation","time" ]
      properties:
        type:
          type: string
          enum:
            - historicalCount
        operation:
          $ref: '#/components/schemas/PropertyFilterOperation'
        value:
          type: integer
        time:
          type: object
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeLast'
            - $ref: '#/components/schemas/TimeAfterFirstUse'
            - $ref: '#/components/schemas/TimeWindowEach'

    SegmentConditionDidEvent:
      description: did event condition
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - didEvent
        - $ref: '#/components/schemas/EventRef'
        - type: object
          properties:
            filters:
              type: array
              items:
                $ref: '#/components/schemas/EventFilterByProperty'
            aggregate:
              type: object
              oneOf:
                - $ref: '#/components/schemas/DidEventCount'
                - $ref: '#/components/schemas/DidEventRelativeCount'
                - $ref: '#/components/schemas/DidEventAggregateProperty'
                - $ref: '#/components/schemas/DidEventHistoricalCount'

    SegmentConditionFunnel:
      type: object
      properties:
        type:
          type: string
          enum:
            - funnel
        last:
          type: integer
        bucket:
          $ref: '#/components/schemas/TimeUnit'

    SegmentConditionRetained:
      type: object

    QuerySimple:
      type: object
      description: simple query without any additional agruments
      required: [ "type","query" ]
      properties:
        type:
          type: string
          enum:
            - simple
        query:
          type: string
          enum:
            - countEvents
            - countUniqueGroups
            - weeklyActiveGroups
            - monthlyActiveGroups

    QueryCountPerGroup:
      type: object
      description: event count aggregate by group
      example: avegate event count per user
      required: [ "type","aggregate" ]
      properties:
        type:
          type: string
          enum:
            - countPerGroup
        aggregate:
          $ref: '#/components/schemas/QueryAggregate'

    QueryAggregatePropertyPerGroup:
      description: aggregate of property per by group
      example: sum of revenue property per user, then calculate average
      required: [ "type","aggregate","propertyType","aggregatePerGroup" ]
      type: object
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - aggregatePropertyPerGroup
        - $ref: '#/components/schemas/PropertyRef'
        - type: object
          properties:
            aggregate:
              $ref: '#/components/schemas/QueryAggregate'
            aggregatePerGroup:
              $ref: '#/components/schemas/QueryAggregate'

    QueryAggregateProperty:
      description: aggregate of property per by group
      example: sum of revenue property per user, then calculate average
      required: [ "type","aggregate","propertyType" ]
      type: object
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - aggregateProperty
        - $ref: '#/components/schemas/PropertyRef'
        - type: object
          properties:
            aggregate:
              $ref: '#/components/schemas/QueryAggregate'

    QueryFormula:
      description: apply formula
      type: object
      properties:
        type:
          type: string
          enum:
            - formula
        formula:
          type: string

    QueryAggregate:
      type: string
      enum:
        - sum
        - avg
        - median
        - min
        - max
        - distinctCount
        - 25thPercentile
        - 75thPercentile
        - 90thPercentile
        - 99thPercentile

    Value:
      type: object
      description: value
      oneOf:
        - type: string
        - type: number
        - type: boolean

    PropertyFilterOperation:
      description: operation
      type: string
      enum:
        - "eq"
        - "neq"
        - "gt"
        - "gte"
        - "lt"
        - "lte"
        - "true"
        - "false"
        - "exists"
        - "empty"
        - "arr_all"
        - "arr_any"
        - "arr_none"
        - "regex"

    PropertyRef:
      type: object
      description: reference to a property by id or name, depends on property type
      oneOf:
        - type: object
          properties:
            propertyName:
              type: string
            propertyType:
              type: string
              enum:
                - event
                - user
        - type: object
          properties:
            propertyId:
              type: number
            propertyType:
              type: string
              enum:
                - custom

    EventRef:
      type: object
      description: reference to event by its name and type
      oneOf:
        - type: object
          properties:
            eventName:
              type: string
            eventType:
              type: string
              enum:
                - regular
        - type: object
          properties:
            eventId:
              type: number
            eventType:
              type: string
              enum:
                - custom

    EventType:
      type: string
      description: possible event type
      enum:
        - regular
        - custom

    PropertyType:
      type: string
      description: possible property type
      enum:
        - event
        - user
        - custom

    DataType:
      type: string
      description: data type
      enum:
        - string
        - number
        - boolean
